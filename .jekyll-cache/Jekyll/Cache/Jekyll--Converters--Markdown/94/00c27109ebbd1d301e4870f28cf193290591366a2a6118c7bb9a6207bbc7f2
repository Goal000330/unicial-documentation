I"ì,<p>Sometimes itâ€™s useful to decouple the different parts of your sceneâ€™s code and make them interact with each other via sending events.</p>

<p>Decentraland scenes handle some <a href="/development-guide/click-events/">default events</a> like <code class="language-plaintext highlighter-rouge">click</code> events and <code class="language-plaintext highlighter-rouge">buttonDown</code> or <code class="language-plaintext highlighter-rouge">buttonUp</code> events, but you can create your own to handle things that are specific to your scene.</p>

<p>For example, you could have a <code class="language-plaintext highlighter-rouge">pickedCoin</code> event thatâ€™s emitted every time the player picks up a coin in your scene. You could then have a score board that listens for these events and updates the score accordingly. Thanks to this, the part of your code that handles the picking of coins doesnâ€™t need to have any reference to the part of the code that updates the scoreboard.</p>

<h2 id="initiate-the-event-manager">Initiate the event manager</h2>

<p>Before you can emit or listen for events, you need to initiate the event manager in your scene.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">events</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventManager</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="define-event-types">Define event types</h2>

<p>If you want events in your scene to contain custom data fields, you need to define a specific type for your events. You do this by defining a class that has an <code class="language-plaintext highlighter-rouge">@EventConstructor()</code> decorator.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">EventConstructor</span><span class="p">()</span>
<span class="kd">class</span> <span class="nx">MyEvent</span> <span class="p">{</span>
  <span class="nl">field1</span><span class="p">:</span> <span class="kr">string</span>
  <span class="nx">field2</span><span class="p">:</span> <span class="kr">number</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="k">public</span> <span class="nx">field1</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="k">public</span> <span class="nx">field2</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">field1</span> <span class="o">=</span> <span class="nx">field1</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">field2</span> <span class="o">=</span> <span class="nx">field2</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="emit-events">Emit events</h2>

<p>To emit an event, you call the <code class="language-plaintext highlighter-rouge">fireEvent()</code> function of the event manager.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">events</span><span class="p">.</span><span class="nx">fireEvent</span><span class="p">(</span><span class="k">new</span> <span class="nx">MyEvent</span><span class="p">(</span><span class="nx">field1</span><span class="p">,</span> <span class="nx">field2</span><span class="p">))</span>
</code></pre></div></div>

<p>Note that in this example, the event being sent contains an object of a custom event type.</p>

<h2 id="listen-for-events">Listen for events</h2>

<p>To listen for an event, you can add call the <code class="language-plaintext highlighter-rouge">addListener()</code> function of the event manager. This function takes in the following arguments:</p>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">type</code> of the event object to listen for.</li>
  <li>The listener to use. This will almost always be <code class="language-plaintext highlighter-rouge">null</code>.</li>
  <li>The function to execute every time the event is caught.</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">events</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="nx">MyEvent</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="p">({</span> <span class="nx">field1</span><span class="p">,</span> <span class="nx">field2</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// function</span>
<span class="p">})</span>
</code></pre></div></div>

<h2 id="full-example">Full example</h2>

<p>The following example scene emits and listens for events.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Initiate event manager</span>
<span class="kd">const</span> <span class="nx">events</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventManager</span><span class="p">()</span>

<span class="c1">// Define an event type</span>
<span class="p">@</span><span class="nd">EventConstructor</span><span class="p">()</span>
<span class="kd">class</span> <span class="nx">UpdateEvent</span> <span class="p">{</span>
  <span class="nl">entity</span><span class="p">:</span> <span class="nx">Entity</span>
  <span class="nx">dt</span><span class="p">:</span> <span class="kr">number</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="k">public</span> <span class="nx">entity</span><span class="p">:</span> <span class="nx">Entity</span><span class="p">,</span> <span class="k">public</span> <span class="nx">dt</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">entity</span> <span class="o">=</span> <span class="nx">entity</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">dt</span> <span class="o">=</span> <span class="nx">dt</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Define a system</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">RotatorSystem</span> <span class="k">implements</span> <span class="nx">ISystem</span> <span class="p">{</span>
  <span class="nx">group</span> <span class="o">=</span> <span class="nx">engine</span><span class="p">.</span><span class="nx">getComponentGroup</span><span class="p">(</span><span class="nx">Transform</span><span class="p">)</span>

  <span class="nx">update</span><span class="p">(</span><span class="nx">dt</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">entity</span> <span class="k">of</span> <span class="k">this</span><span class="p">.</span><span class="nx">group</span><span class="p">.</span><span class="nx">entities</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// Emit custom event</span>
      <span class="nx">events</span><span class="p">.</span><span class="nx">fireEvent</span><span class="p">(</span><span class="k">new</span> <span class="nx">UpdateEvent</span><span class="p">(</span><span class="nx">entity</span><span class="p">,</span> <span class="nx">dt</span><span class="p">))</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">engine</span><span class="p">.</span><span class="nx">addSystem</span><span class="p">(</span><span class="k">new</span> <span class="nx">RotatorSystem</span><span class="p">())</span>

<span class="c1">// Add a listener</span>
<span class="nx">events</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="nx">UpdateEvent</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="p">({</span> <span class="nx">entity</span><span class="p">,</span> <span class="nx">dt</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">transform</span> <span class="o">=</span> <span class="nx">entity</span><span class="p">.</span><span class="nx">getComponent</span><span class="p">(</span><span class="nx">Transform</span><span class="p">)</span>
  <span class="kd">const</span> <span class="nx">euler</span> <span class="o">=</span> <span class="nx">transform</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">eulerAngles</span>
  <span class="nx">euler</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="nx">dt</span> <span class="o">*</span> <span class="mi">10</span>
  <span class="nx">transform</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">eulerAngles</span> <span class="o">=</span> <span class="nx">euler</span>
<span class="p">})</span>

<span class="c1">// Add an entity to work with</span>
<span class="kd">const</span> <span class="nx">cube</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="kd">const</span> <span class="nx">transform</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Transform</span><span class="p">()</span>

<span class="nx">cube</span><span class="p">.</span><span class="nx">addComponentOrReplace</span><span class="p">(</span><span class="nx">transform</span><span class="p">)</span>
<span class="nx">transform</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">boxShape</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BoxShape</span><span class="p">()</span>
<span class="nx">cube</span><span class="p">.</span><span class="nx">addComponentOrReplace</span><span class="p">(</span><span class="nx">boxShape</span><span class="p">)</span>

<span class="nx">engine</span><span class="p">.</span><span class="nx">addEntity</span><span class="p">(</span><span class="nx">cube</span><span class="p">)</span>
</code></pre></div></div>

<!--

## Custom events

Define an event manager

```ts
export namespace EventManager {

  const subscriptions: Record<string, Array<(params?: any) => void> > = {}

  export function on(evt: string, callback: (params?: any) => void) {
    if (!subscriptions[evt]){
      subscriptions[evt] = []
    }
    subscriptions[evt].push(callback)
  }

  export function emit(evt: string, params?: any) {
    if (subscriptions[evt]){
      subscriptions[evt].forEach(callback => callback(params))
    }
  }
}
```

Import the event manager

```ts
import { EventManager } from 'ts/EventManager'
```

Use it:

```ts
EventManager.emit("test", {test: 5})

EventManager.on("test", function(e) {
  log("test " + e.test)
 })

 ```

-->
:ET