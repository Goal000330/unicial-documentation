I"æ3<p>As your scene becomes more complicated, itâ€™s useful to put some of the logic into separate game object files. By doing this, you can keep the main code for the scene clean and simple to read, while encapsulating reusable parts that control several entities in the scene.</p>

<p>A Game Object holds all the properties and methods for a type of entity you might find in your scene, for example a door or a button or a monster. Thanks to this abstraction, the files with your sceneâ€™s main logic can instance full game objects through just one line of code. You can also call the methods on these objects with the same ease.</p>

<p>We recommend keeping game object definitions each in a separate file.</p>

<p>Below is an example of a <code class="language-plaintext highlighter-rouge">Door</code> game object. This object has a constructor that requires that you pass it a shape, a sound and a position. It also exposes an <code class="language-plaintext highlighter-rouge">openDoor</code>, <code class="language-plaintext highlighter-rouge">closeDoor</code> and <code class="language-plaintext highlighter-rouge">toggleDoor</code> method, that can be called from other files.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">class</span> <span class="nx">Door</span> <span class="kd">extends</span> <span class="nx">Entity</span> <span class="p">{</span>
  <span class="k">public</span> <span class="nx">isOpen</span><span class="p">:</span> <span class="nx">boolean</span>

  <span class="c1">// Allow each room to specify a unique look and feel</span>
  <span class="kd">constructor</span><span class="p">(</span>
    <span class="nx">model</span><span class="p">:</span> <span class="nx">GLTFShape</span><span class="p">,</span>
    <span class="nx">transform</span><span class="p">:</span> <span class="nx">TranformConstructorArgs</span><span class="p">,</span>
    <span class="nx">sound</span><span class="p">:</span> <span class="nx">AudioClip</span>
  <span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">()</span>
    <span class="nx">engine</span><span class="p">.</span><span class="nx">addEntity</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">model</span><span class="p">)</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">Transform</span><span class="p">(</span><span class="nx">transform</span><span class="p">))</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">Animator</span><span class="p">())</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getComponent</span><span class="p">(</span><span class="nx">Animator</span><span class="p">).</span><span class="nx">addClip</span><span class="p">(</span>
      <span class="k">new</span> <span class="nx">AnimationState</span><span class="p">(</span><span class="dl">"</span><span class="s2">Door_Open</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">looping</span><span class="p">:</span> <span class="kc">false</span> <span class="p">})</span>
    <span class="p">)</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getComponent</span><span class="p">(</span><span class="nx">Animator</span><span class="p">).</span><span class="nx">addClip</span><span class="p">(</span>
      <span class="k">new</span> <span class="nx">AnimationState</span><span class="p">(</span><span class="dl">"</span><span class="s2">Door_Close</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">looping</span><span class="p">:</span> <span class="kc">false</span> <span class="p">})</span>
    <span class="p">)</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">AudioSource</span><span class="p">(</span><span class="nx">sound</span><span class="p">))</span>
  <span class="p">}</span>

  <span class="cm">/**
   * Exposing `openDoor` as an action this object is capable of doing
   * This contains the open door experience (animation and sound) while allowing
   * the scene to decide when the action occurs
   */</span>

  <span class="k">public</span> <span class="nx">openDoor</span><span class="p">(</span><span class="nx">playAudio</span> <span class="o">=</span> <span class="kc">true</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">isOpen</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">isOpen</span> <span class="o">=</span> <span class="kc">true</span>

      <span class="k">this</span><span class="p">.</span><span class="nx">getComponent</span><span class="p">(</span><span class="nx">Animator</span><span class="p">).</span><span class="nx">getClip</span><span class="p">(</span><span class="dl">"</span><span class="s2">Door_Close</span><span class="dl">"</span><span class="p">).</span><span class="nx">stop</span><span class="p">()</span> <span class="c1">// bug workaround</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">getComponent</span><span class="p">(</span><span class="nx">Animator</span><span class="p">).</span><span class="nx">getClip</span><span class="p">(</span><span class="dl">"</span><span class="s2">Door_Open</span><span class="dl">"</span><span class="p">).</span><span class="nx">play</span><span class="p">()</span>

      <span class="k">if</span> <span class="p">(</span><span class="nx">playAudio</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">getComponent</span><span class="p">(</span><span class="nx">AudioSource</span><span class="p">).</span><span class="nx">playOnce</span><span class="p">()</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// Similiarly we can close the door.</span>
  <span class="k">public</span> <span class="nx">closeDoor</span><span class="p">(</span><span class="nx">playAudio</span> <span class="o">=</span> <span class="kc">true</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isOpen</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">isOpen</span> <span class="o">=</span> <span class="kc">false</span>

      <span class="k">this</span><span class="p">.</span><span class="nx">getComponent</span><span class="p">(</span><span class="nx">Animator</span><span class="p">).</span><span class="nx">getClip</span><span class="p">(</span><span class="dl">"</span><span class="s2">Door_Open</span><span class="dl">"</span><span class="p">).</span><span class="nx">stop</span><span class="p">()</span> <span class="c1">// bug workaround</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">getComponent</span><span class="p">(</span><span class="nx">Animator</span><span class="p">).</span><span class="nx">getClip</span><span class="p">(</span><span class="dl">"</span><span class="s2">Door_Close</span><span class="dl">"</span><span class="p">).</span><span class="nx">play</span><span class="p">()</span>

      <span class="k">if</span> <span class="p">(</span><span class="nx">playAudio</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">getComponent</span><span class="p">(</span><span class="nx">AudioSource</span><span class="p">).</span><span class="nx">playOnce</span><span class="p">()</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// Or toggle the state between open and closed</span>
  <span class="k">public</span> <span class="nx">toggleDoor</span><span class="p">(</span><span class="nx">playAudio</span> <span class="o">=</span> <span class="kc">true</span><span class="p">):</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isOpen</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">closeDoor</span><span class="p">(</span><span class="nx">playAudio</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">openDoor</span><span class="p">(</span><span class="nx">playAudio</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>A few things to note from the code above:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">export</code> makes the class available to other files in your scene</li>
  <li><code class="language-plaintext highlighter-rouge">extends Entity</code> makes this definition inherit everything from the base <code class="language-plaintext highlighter-rouge">Entity</code> class</li>
  <li><code class="language-plaintext highlighter-rouge">this</code> refers to the current instance of the game object</li>
</ul>

<p>None of the code above produces any changes in the scene on its own. It just exposes constructors and methods that can be called from other files, keeping whatâ€™s possible separate from what is to be done.</p>

<p>Once the <code class="language-plaintext highlighter-rouge">Door</code> class is defined in your scene, you can use it in your <code class="language-plaintext highlighter-rouge">game.ts</code> or any other file:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Door</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./door</span><span class="dl">"</span>

<span class="kd">const</span> <span class="nx">door</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Door</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">GLTFShape</span><span class="p">(</span><span class="dl">"</span><span class="s2">models/Door.glb</span><span class="dl">"</span><span class="p">),</span>
  <span class="p">{</span> <span class="na">position</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Vector3</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">)</span> <span class="p">},</span>
  <span class="k">new</span> <span class="nx">AudioClip</span><span class="p">(</span><span class="dl">"</span><span class="s2">sounds/door_squeak.mp3</span><span class="dl">"</span><span class="p">)</span>
<span class="p">)</span>
<span class="nx">door</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">OnClick</span><span class="p">(():</span> <span class="k">void</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">door</span><span class="p">.</span><span class="nx">toggleDoor</span><span class="p">()</span>
  <span class="p">})</span>
<span class="p">)</span>
</code></pre></div></div>

<p>The code above imports the <code class="language-plaintext highlighter-rouge">Door</code> class, then instances a door, and adds an OnClick behavior to it that simply calls the <code class="language-plaintext highlighter-rouge">toggleDoor</code> method in the <code class="language-plaintext highlighter-rouge">Door</code> class.</p>

<blockquote>
  <p>Tip: To learn more about using game objects in Decentraland scenes, see this <a href="https://www.youtube.com/watch?v=_kksSC91DKE">Tutorial video</a></p>
</blockquote>

<h2 id="the-type-object-pattern">The Type Object Pattern</h2>

<p>If your scene uses various types of game objects that have much in common, you might want to take this refactor even further, and define a <em>base</em> game object type with all the things that these have in common. You can then create sub classes that inherit from this base class.</p>

<p>You can read more about this pattern in <a href="http://www.gameprogrammingpatterns.com/type-object.html">Game Programming Patterns</a>.</p>
:ET