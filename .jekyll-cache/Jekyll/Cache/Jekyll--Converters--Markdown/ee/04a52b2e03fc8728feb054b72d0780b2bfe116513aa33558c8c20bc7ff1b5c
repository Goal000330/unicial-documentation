I"àπ<p>There are several special component types that are meant for using in a 2D screen space as part of the UI, instead of in the 3D world space. These components are displayed fixed on the player‚Äôs screen.</p>

<p>UI elements are only visible when the player is standing inside the scene‚Äôs LAND parcels, as neighboring scenes might have their own UI to display. When the player clicks the <em>close UI</em> button, on the bottom-right corner of the screen, all UI elements go away.</p>

<p>The UI can also be triggered to open when certain events occur in the world-space, for example if the player clicks on a specific place.</p>

<p>The default Decentraland explorer UI includes a chat widget, a map, and other elements. These UI elements are always displayed on the top layer, above any scene-specific UI. So if your scene has UI elements that occupy the same screen space as these, they will be occluded.</p>

<h2 id="add-a-screenspace-ui">Add a Screenspace UI</h2>

<p>To add a screenspace UI to your scene, you must create a <code class="language-plaintext highlighter-rouge">UICanvas</code> component, this component doesn‚Äôt need to belong to any Entities to work. All the visible UI elements that you want the player to see are added as additional objects that are children of this parent component.</p>

<!--
![](/images/media/UI-basic.png)
-->

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create screenspace component</span>
<span class="kd">const</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UICanvas</span><span class="p">()</span>

<span class="c1">// Create a textShape component, setting the canvas as parent</span>
<span class="kd">const</span> <span class="nx">text</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UIText</span><span class="p">(</span><span class="nx">canvas</span><span class="p">)</span>
<span class="nx">text</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello world!</span><span class="dl">"</span>
</code></pre></div></div>

<blockquote>
  <p>Note: Create only one <code class="language-plaintext highlighter-rouge">UICanvas</code> per scene. To have different menus that appear at different times, make them all children of the same <code class="language-plaintext highlighter-rouge">UICanvas</code>, and set their visibility at that level.</p>
</blockquote>

<h2 id="types-of-ui-content">Types of UI content</h2>

<p>There are several different types of UI elements you can add to the screenspace:</p>

<ul>
  <li>
    <p>Images: Add a <code class="language-plaintext highlighter-rouge">UIImage</code> component to display any image. Use the <code class="language-plaintext highlighter-rouge">source</code> field to point to the path of the image.</p>
  </li>
  <li>
    <p>Text: Add a <code class="language-plaintext highlighter-rouge">UIText</code>component to display text. The properties you can set are the same as in a <code class="language-plaintext highlighter-rouge">TextShape</code> component. See <a href="/development-guide/text/">text</a>.</p>
  </li>
</ul>

<!--
- Buttons: Add a `UIButton` to add a clickable button. The button offers some visual feedback when players mouse over it and when they click it.
-->

<ul>
  <li>
    <p>Text input box: Add a <code class="language-plaintext highlighter-rouge">UIInputText</code> to have an input box where players can type in text with their keyboards or their mobile devices.</p>
  </li>
  <li>
    <p>Scrollable rectangle: Add a <code class="language-plaintext highlighter-rouge">UIScrollRect</code> to have an area that can be filled with content. The rectangle can optionally have a slider if the content exceeds the rectangle area. Players can drag this slider to explore the contents of the rectangle.</p>
  </li>
</ul>

<h2 id="positioning">Positioning</h2>

<p>All UI components have several fields you can set to determine the position of the component on the screenspace.</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">hAlign</code> horizontal alignment relative to the parent. Possible values: <code class="language-plaintext highlighter-rouge">left</code>, <code class="language-plaintext highlighter-rouge">right</code>, <code class="language-plaintext highlighter-rouge">center</code>.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">vAlign</code> horizontal alignment relative to the parent. Possible values: <code class="language-plaintext highlighter-rouge">top</code>, <code class="language-plaintext highlighter-rouge">bottom</code>, <code class="language-plaintext highlighter-rouge">center</code>.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">positionX</code>, <code class="language-plaintext highlighter-rouge">positionY</code>: the position of the top-left corner of the component, relative to the parent. By default, to the top-left corner of its parent. If the <code class="language-plaintext highlighter-rouge">hAlign</code> or <code class="language-plaintext highlighter-rouge">vAlign</code> properties are set, then <code class="language-plaintext highlighter-rouge">positionX</code> and <code class="language-plaintext highlighter-rouge">positionY</code> offset the UI component relative to the position of these alignment properties.</p>
  </li>
</ul>

<blockquote>
  <p>Tip: When measuring from the top, the numbers for <code class="language-plaintext highlighter-rouge">positionY</code> should be negative. Example: to position a component leaving a margin of 20 pixels with respect to the parent on the top and left sides, set <code class="language-plaintext highlighter-rouge">positionX</code> to 20 and <code class="language-plaintext highlighter-rouge">positionY</code> to -20.</p>
</blockquote>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">paddingLeft</code>, <code class="language-plaintext highlighter-rouge">paddingRight</code>, <code class="language-plaintext highlighter-rouge">paddingTop</code>, <code class="language-plaintext highlighter-rouge">paddingBottom</code>: padding space to leave empty around. To set these fields in pixels, write the value as a number. To set these fields as a percentage of the parent‚Äôs measurements, write the value as a string that ends in ‚Äú%‚Äù, for example <code class="language-plaintext highlighter-rouge">10 %</code></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">with</code>, <code class="language-plaintext highlighter-rouge">height</code>: Set the size of the component in the screen. To set these fields in pixels, write the value as a number. To set these fields as a percentage of the parent‚Äôs measurements, write the value as a string that ends in ‚Äú%‚Äù, for example <code class="language-plaintext highlighter-rouge">10 %</code></p>
  </li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UICanvas</span><span class="p">()</span>

<span class="kd">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UIText</span><span class="p">(</span><span class="nx">canvas</span><span class="p">)</span>
<span class="nx">message</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Close UI</span><span class="dl">"</span>
<span class="nx">message</span><span class="p">.</span><span class="nx">fontSize</span> <span class="o">=</span> <span class="mi">15</span>
<span class="nx">message</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="mi">120</span>
<span class="nx">message</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="mi">30</span>
<span class="nx">message</span><span class="p">.</span><span class="nx">vAlign</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">bottom</span><span class="dl">"</span>
<span class="nx">message</span><span class="p">.</span><span class="nx">positionX</span> <span class="o">=</span> <span class="o">-</span><span class="mi">80</span>
</code></pre></div></div>

<p>To determine the z position of UI elements, the UI uses the parenting hierarchy of the components. So, if a component is a child of another, it will appear in front of the other.</p>

<h2 id="use-parent-elements-for-organizing">Use parent elements for organizing</h2>

<p>Certain UI elements are there to help you organize how you place other elements.</p>

<!--
![](/images/media/UI-rectangle.png)
-->

<p>For this, you can use the <code class="language-plaintext highlighter-rouge">UIContainerStack</code> and the <code class="language-plaintext highlighter-rouge">UIContainerRect</code>.</p>

<p>Both these shapes have properties to set their color, and line thickness.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UICanvas</span><span class="p">()</span>

<span class="kd">const</span> <span class="nx">inventoryContainer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UIContainerStack</span><span class="p">(</span><span class="nx">canvas</span><span class="p">)</span>
<span class="nx">inventoryContainer</span><span class="p">.</span><span class="nx">adaptWidth</span> <span class="o">=</span> <span class="kc">true</span>
<span class="nx">inventoryContainer</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">40%</span><span class="dl">"</span>
<span class="nx">inventoryContainer</span><span class="p">.</span><span class="nx">positionY</span> <span class="o">=</span> <span class="mi">100</span>
<span class="nx">inventoryContainer</span><span class="p">.</span><span class="nx">positionX</span> <span class="o">=</span> <span class="mi">10</span>
<span class="nx">inventoryContainer</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">Color4</span><span class="p">.</span><span class="nx">White</span><span class="p">()</span>
<span class="nx">inventoryContainer</span><span class="p">.</span><span class="nx">hAlign</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">left</span><span class="dl">"</span>
<span class="nx">inventoryContainer</span><span class="p">.</span><span class="nx">vAlign</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">top</span><span class="dl">"</span>
<span class="nx">inventoryContainer</span><span class="p">.</span><span class="nx">stackOrientation</span> <span class="o">=</span> <span class="nx">UIStackOrientation</span><span class="p">.</span><span class="nx">VERTICAL</span>
</code></pre></div></div>

<p>Container components also have following properties:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">adaptWidth</code> <code class="language-plaintext highlighter-rouge">adaptHeight</code>: Set on parent components. If these are set to true, the width and height wrap the child components (plus padding). If these are true, <code class="language-plaintext highlighter-rouge">width</code> and <code class="language-plaintext highlighter-rouge">height</code> values are ignored</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">stackOrientation</code>: The <code class="language-plaintext highlighter-rouge">UIContainerStack</code> component has this property to set if the stack will expand vertically or horizontally.</p>
  </li>
</ul>

<h4 id="scrollable-rectangles">Scrollable rectangles</h4>

<p>You can also add UI elements into a <code class="language-plaintext highlighter-rouge">UIScrollRect</code>. If these rectangles have more content in them that what fits in their width or height, a slider will appear on the margins, that players can interact with to explore this content.</p>

<p>Scrollable rectangles can be horizontal or vertical, or both.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UICanvas</span><span class="p">()</span>

<span class="kd">const</span> <span class="nx">scrollableContainer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UIScrollRect</span><span class="p">(</span><span class="nx">canvas</span><span class="p">)</span>
<span class="nx">scrollableContainer</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">50%</span><span class="dl">"</span>
<span class="nx">scrollableContainer</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">50%</span><span class="dl">"</span>
<span class="nx">scrollableContainer</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="nx">Color4</span><span class="p">.</span><span class="nx">Gray</span><span class="p">()</span>
<span class="nx">scrollableContainer</span><span class="p">.</span><span class="nx">isVertical</span> <span class="o">=</span> <span class="kc">true</span>
<span class="nx">scrollableContainer</span><span class="p">.</span><span class="nx">onChanged</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OnChanged</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">scrolled to </span><span class="dl">"</span><span class="p">,</span> <span class="nx">scrollableContainer</span><span class="p">.</span><span class="nx">positionY</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<p>Scrolling values are always normalized from 0 to 1. You can set the scrolling value manually via the <code class="language-plaintext highlighter-rouge">valueX</code> and <code class="language-plaintext highlighter-rouge">valueY</code> properties.</p>

<p>The <code class="language-plaintext highlighter-rouge">onChanged</code> property lets you run a function whenever the value of the scrollbar changes.</p>

<h2 id="set-transparency">Set transparency</h2>

<p>You can make a UI element partly transparent by setting its <code class="language-plaintext highlighter-rouge">opacity</code> property to a value that‚Äôs less than 1.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UICanvas</span><span class="p">()</span>

<span class="kd">const</span> <span class="nx">rect</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UIContainerRect</span><span class="p">(</span><span class="nx">canvas</span><span class="p">)</span>
<span class="nx">rect</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">100%</span><span class="dl">"</span>
<span class="nx">rect</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">100%</span><span class="dl">"</span>
<span class="nx">rect</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">Color4</span><span class="p">.</span><span class="nx">Blue</span><span class="p">()</span>
<span class="nx">rect</span><span class="p">.</span><span class="nx">opacity</span> <span class="o">=</span> <span class="mf">0.5</span>
</code></pre></div></div>

<p>Setting an element‚Äôs opacity also affects all of its children. If you don‚Äôt want its children to be transparent, for example you want the background to be transparent but not the text on it, you can set the color with a hex string that has four values, one of them being the alpha channel.</p>

<h2 id="text">Text</h2>

<p>The <code class="language-plaintext highlighter-rouge">UIText</code> component lets you add text. It has properties that are similar to the <code class="language-plaintext highlighter-rouge">TextShape</code> component. See <a href="/development-guide/text/">text</a>.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">value</code>: the string to display</li>
  <li><code class="language-plaintext highlighter-rouge">color</code>: <code class="language-plaintext highlighter-rouge">Color4</code> for the text color</li>
  <li><code class="language-plaintext highlighter-rouge">fontSize</code>: font size</li>
  <li><code class="language-plaintext highlighter-rouge">font</code>: font to use</li>
  <li><code class="language-plaintext highlighter-rouge">lineSpacing</code> : space between lines of text</li>
  <li><code class="language-plaintext highlighter-rouge">lineCount</code>: how many max lines of text</li>
  <li><code class="language-plaintext highlighter-rouge">textWrapping</code>: if text automatically occupies more lines</li>
  <li><code class="language-plaintext highlighter-rouge">outlineWidth</code>, <code class="language-plaintext highlighter-rouge">outlineColor</code>: add an outline to the text</li>
  <li><code class="language-plaintext highlighter-rouge">shadowBlur</code>, <code class="language-plaintext highlighter-rouge">shadowOffsetX</code>, <code class="language-plaintext highlighter-rouge">shadowOffsetY</code>, <code class="language-plaintext highlighter-rouge">shadowColor</code>: Add a shadow to the text</li>
</ul>

<p>Fonts are set as a <em>Font object</em>. Font objects are initiated with a value from the <em>Fonts</em> enum, which contains all supported fonts. By default, all text components use <em>LiberationSans</em> font.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UICanvas</span><span class="p">()</span>

<span class="kd">const</span> <span class="nx">myText</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UIText</span><span class="p">(</span><span class="nx">canvas</span><span class="p">)</span>
<span class="nx">myText</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span>
<span class="nx">myText</span><span class="p">.</span><span class="nx">font</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Font</span><span class="p">(</span><span class="nx">Fonts</span><span class="p">.</span><span class="nx">SanFrancisco</span><span class="p">)</span>
<span class="nx">myText</span><span class="p">.</span><span class="nx">fontSize</span> <span class="o">=</span> <span class="mi">20</span>
<span class="nx">myText</span><span class="p">.</span><span class="nx">positionX</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">15px</span><span class="dl">"</span>
<span class="nx">myText</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">Color4</span><span class="p">.</span><span class="nx">Blue</span><span class="p">()</span>
</code></pre></div></div>

<blockquote>
  <p>TIP: If using VS studio or some other IDE, type <code class="language-plaintext highlighter-rouge">Font.</code> and you should see a list of suggestions with all of the available fonts.</p>
</blockquote>

<p>You can share a same instanced <code class="language-plaintext highlighter-rouge">Font</code> object accross multiple <code class="language-plaintext highlighter-rouge">UIText</code> components.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">sfFont</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Font</span><span class="p">(</span><span class="nx">Fonts</span><span class="p">.</span><span class="nx">SanFrancisco</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">myText</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UIText</span><span class="p">(</span><span class="nx">canvas</span><span class="p">)</span>
<span class="nx">myText</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span>
<span class="nx">myText</span><span class="p">.</span><span class="nx">font</span> <span class="o">=</span> <span class="nx">sfFont</span>

<span class="kd">const</span> <span class="nx">myText2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UIText</span><span class="p">(</span><span class="nx">canvas</span><span class="p">)</span>
<span class="nx">myText2</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">World</span><span class="dl">"</span>
<span class="nx">myText2</span><span class="p">.</span><span class="nx">font</span> <span class="o">=</span> <span class="nx">sfFont</span>
</code></pre></div></div>

<h4 id="multiline-text">Multiline text</h4>

<p><code class="language-plaintext highlighter-rouge">UIText</code> components by default adapt their width to the length of the provided string. To make a text span multiple lines, set the <code class="language-plaintext highlighter-rouge">textWrapping</code> property to <em>true</em> and <code class="language-plaintext highlighter-rouge">adaptWidth</code> to <em>false</em>, and also specify the desired width.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UICanvas</span><span class="p">()</span>

<span class="kd">const</span> <span class="nx">myText</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UIText</span><span class="p">(</span><span class="nx">canvas</span><span class="p">)</span>
<span class="nx">myText</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span>
  <span class="dl">"</span><span class="s2">Hello World, this message is quite long and won't fit in a single line. I hope that's not a problem.</span><span class="dl">"</span>
<span class="nx">myText</span><span class="p">.</span><span class="nx">fontSize</span> <span class="o">=</span> <span class="mi">20</span>
<span class="nx">myText</span><span class="p">.</span><span class="nx">adaptWidth</span> <span class="o">=</span> <span class="kc">false</span>
<span class="nx">myText</span><span class="p">.</span><span class="nx">textWrapping</span> <span class="o">=</span> <span class="kc">true</span>
<span class="nx">myText</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="mi">100</span>
</code></pre></div></div>

<p>Alternatively, you can add line breaks into the string, using <code class="language-plaintext highlighter-rouge">\n</code>.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UICanvas</span><span class="p">()</span>

<span class="kd">const</span> <span class="nx">myText</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UIText</span><span class="p">(</span><span class="nx">canvas</span><span class="p">)</span>
<span class="nx">myText</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span>
  <span class="dl">"</span><span class="s2">Hello World,</span><span class="se">\n</span><span class="s2">this message is quite long and won't fit in a single line.</span><span class="se">\n</span><span class="s2">I hope that's not a problem.</span><span class="dl">"</span>
<span class="nx">myText</span><span class="p">.</span><span class="nx">fontSize</span> <span class="o">=</span> <span class="mi">20</span>
</code></pre></div></div>

<h2 id="images-from-an-image-atlas">Images from an image atlas</h2>

<p>You can use an image atlas to store multiple images and icons in a single image file. You then display rectangular parts of this image file in your UI based on pixel positions, pixel width, and pixel height inside the source image.</p>

<p>Below is an example of an image atlas with multiple icons arranged into a single file.</p>

<p><img src="/images/media/UI-atlas.png" alt="" /></p>

<p>The <code class="language-plaintext highlighter-rouge">UIImage</code> component has the following fields to crop a sub-section of the original image:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">sourceTop</code>: the <em>y</em> coordinate, in pixels, of the top of the selection</li>
  <li><code class="language-plaintext highlighter-rouge">sourceLeft</code>: the <em>x</em> coordinate, in pixels, of the left side of the selection.</li>
  <li><code class="language-plaintext highlighter-rouge">sourceWidth</code>: the width, in pixels, of the selected area</li>
  <li><code class="language-plaintext highlighter-rouge">sourceHeight</code>: the height, in pixels, of the selected area</li>
</ul>

<p>When constructing a <code class="language-plaintext highlighter-rouge">UIImage</code> component, you must pass a <code class="language-plaintext highlighter-rouge">Texture</code> component as an argument. Read more about <code class="language-plaintext highlighter-rouge">Texture</code> components in <a href="/development-guide/materials/">materials</a>.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">imageAtlas</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">images/image-atlas.jpg</span><span class="dl">"</span>
<span class="kd">let</span> <span class="nx">imageTexture</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Texture</span><span class="p">(</span><span class="nx">imageAtlas</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UICanvas</span><span class="p">()</span>

<span class="kd">const</span> <span class="nx">playButton</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UIImage</span><span class="p">(</span><span class="nx">canvas</span><span class="p">,</span> <span class="nx">imageTexture</span><span class="p">)</span>
<span class="nx">playButton</span><span class="p">.</span><span class="nx">sourceLeft</span> <span class="o">=</span> <span class="mi">26</span>
<span class="nx">playButton</span><span class="p">.</span><span class="nx">sourceTop</span> <span class="o">=</span> <span class="mi">128</span>
<span class="nx">playButton</span><span class="p">.</span><span class="nx">sourceWidth</span> <span class="o">=</span> <span class="mi">128</span>
<span class="nx">playButton</span><span class="p">.</span><span class="nx">sourceHeight</span> <span class="o">=</span> <span class="mi">128</span>

<span class="kd">const</span> <span class="nx">startButton</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UIImage</span><span class="p">(</span><span class="nx">canvas</span><span class="p">,</span> <span class="nx">imageTexture</span><span class="p">)</span>
<span class="nx">startButton</span><span class="p">.</span><span class="nx">sourceLeft</span> <span class="o">=</span> <span class="mi">183</span>
<span class="nx">startButton</span><span class="p">.</span><span class="nx">sourceTop</span> <span class="o">=</span> <span class="mi">128</span>
<span class="nx">startButton</span><span class="p">.</span><span class="nx">sourceWidth</span> <span class="o">=</span> <span class="mi">128</span>
<span class="nx">startButton</span><span class="p">.</span><span class="nx">sourceHeight</span> <span class="o">=</span> <span class="mi">128</span>

<span class="kd">const</span> <span class="nx">exitButton</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UIImage</span><span class="p">(</span><span class="nx">canvas</span><span class="p">,</span> <span class="nx">imageTexture</span><span class="p">)</span>
<span class="nx">exitButton</span><span class="p">.</span><span class="nx">sourceLeft</span> <span class="o">=</span> <span class="mi">346</span>
<span class="nx">exitButton</span><span class="p">.</span><span class="nx">sourceTop</span> <span class="o">=</span> <span class="mi">128</span>
<span class="nx">exitButton</span><span class="p">.</span><span class="nx">sourceWidth</span> <span class="o">=</span> <span class="mi">128</span>
<span class="nx">exitButton</span><span class="p">.</span><span class="nx">sourceHeight</span> <span class="o">=</span> <span class="mi">128</span>

<span class="kd">const</span> <span class="nx">expandButton</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UIImage</span><span class="p">(</span><span class="nx">canvas</span><span class="p">,</span> <span class="nx">imageTexture</span><span class="p">)</span>
<span class="nx">expandButton</span><span class="p">.</span><span class="nx">sourceLeft</span> <span class="o">=</span> <span class="mi">496</span>
<span class="nx">expandButton</span><span class="p">.</span><span class="nx">sourceTop</span> <span class="o">=</span> <span class="mi">128</span>
<span class="nx">expandButton</span><span class="p">.</span><span class="nx">sourceWidth</span> <span class="o">=</span> <span class="mi">128</span>
<span class="nx">expandButton</span><span class="p">.</span><span class="nx">sourceHeight</span> <span class="o">=</span> <span class="mi">128</span>
</code></pre></div></div>

<p>You can change the texture being used by an existing <code class="language-plaintext highlighter-rouge">UIImage</code> component, set the <code class="language-plaintext highlighter-rouge">data</code> field.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">playButton</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">imageTexture2</span>
</code></pre></div></div>

<h2 id="clicking-ui-elements">Clicking UI elements</h2>

<p>All UI elements have an <code class="language-plaintext highlighter-rouge">isPointerBlocker</code> property, that determines if they can be clicked. If this value is false, the pointer should ignore them and respond to whatever is behind the element.</p>

<p>Clickable UI elements also have an <code class="language-plaintext highlighter-rouge">OnClick</code> property, that lets you add a function to execute every time it‚Äôs clicked.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UICanvas</span><span class="p">()</span>

<span class="kd">const</span> <span class="nx">clickableImage</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UIImage</span><span class="p">(</span><span class="nx">canvas</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Texture</span><span class="p">(</span><span class="dl">"</span><span class="s2">icon.png</span><span class="dl">"</span><span class="p">))</span>
<span class="nx">clickableImage</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">clickable-image</span><span class="dl">"</span>
<span class="nx">clickableImage</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">92px</span><span class="dl">"</span>
<span class="nx">clickableImage</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">91px</span><span class="dl">"</span>
<span class="nx">clickableImage</span><span class="p">.</span><span class="nx">sourceWidth</span> <span class="o">=</span> <span class="mi">92</span>
<span class="nx">clickableImage</span><span class="p">.</span><span class="nx">sourceHeight</span> <span class="o">=</span> <span class="mi">91</span>
<span class="nx">clickableImage</span><span class="p">.</span><span class="nx">isPointerBlocker</span> <span class="o">=</span> <span class="kc">true</span>
<span class="nx">clickableImage</span><span class="p">.</span><span class="nx">onClick</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OnClick</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// DO SOMETHING</span>
<span class="p">})</span>
</code></pre></div></div>

<!--
![](/images/media/UI-clicks.png)
-->

<blockquote>
  <p>Note: To click on a UI component, players must first unlock the cursor from the view control. They do this by clicking the <em>right mouse button</em> or hitting <code class="language-plaintext highlighter-rouge">Esc</code>.</p>
</blockquote>

<blockquote>
  <p>Tip: If you want to add text over a button, keep in mind that the text needs to have the <code class="language-plaintext highlighter-rouge">isPointerBlocker</code> property set to <code class="language-plaintext highlighter-rouge">false</code>, otherwise players might be clicking the text instead of the button.</p>
</blockquote>

<h2 id="input-text">Input text</h2>

<p>Input boxes can be added to the UI to provide a place to type in text. You add a text box with an <code class="language-plaintext highlighter-rouge">UIInputText</code> component. Players must first click on this box before they can write into it.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UICanvas</span><span class="p">()</span>

<span class="kd">const</span> <span class="nx">textInput</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UIInputText</span><span class="p">(</span><span class="nx">canvas</span><span class="p">)</span>
<span class="nx">textInput</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">80%</span><span class="dl">"</span>
<span class="nx">textInput</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">25px</span><span class="dl">"</span>
<span class="nx">textInput</span><span class="p">.</span><span class="nx">vAlign</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">bottom</span><span class="dl">"</span>
<span class="nx">textInput</span><span class="p">.</span><span class="nx">hAlign</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">center</span><span class="dl">"</span>
<span class="nx">textInput</span><span class="p">.</span><span class="nx">fontSize</span> <span class="o">=</span> <span class="mi">10</span>
<span class="nx">textInput</span><span class="p">.</span><span class="nx">placeholder</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Write message here</span><span class="dl">"</span>
<span class="nx">textInput</span><span class="p">.</span><span class="nx">placeholderColor</span> <span class="o">=</span> <span class="nx">Color4</span><span class="p">.</span><span class="nx">Gray</span><span class="p">()</span>
<span class="nx">textInput</span><span class="p">.</span><span class="nx">positionY</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">200px</span><span class="dl">"</span>
<span class="nx">textInput</span><span class="p">.</span><span class="nx">isPointerBlocker</span> <span class="o">=</span> <span class="kc">true</span>

<span class="nx">textInput</span><span class="p">.</span><span class="nx">onTextSubmit</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OnTextSubmit</span><span class="p">((</span><span class="nx">x</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">text</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UIText</span><span class="p">(</span><span class="nx">textInput</span><span class="p">)</span>
  <span class="nx">text</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">&lt;USER-ID&gt; </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">x</span><span class="p">.</span><span class="nx">text</span>
  <span class="nx">text</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">100%</span><span class="dl">"</span>
  <span class="nx">text</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">20px</span><span class="dl">"</span>
  <span class="nx">text</span><span class="p">.</span><span class="nx">vAlign</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">top</span><span class="dl">"</span>
  <span class="nx">text</span><span class="p">.</span><span class="nx">hAlign</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">left</span><span class="dl">"</span>
<span class="p">})</span>
</code></pre></div></div>

<p>Here are some of the main properties you can set:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">focusedBackground</code>: You can change the background color to indicate that the input box is currently selected. Use this field to set an alternative color.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">placeholder</code>: Set placeholder text to display on the box by default.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">placeholderColor</code>: Make the placeholder a different color, to tell it apart. You‚Äôll usually want to make it a paler shade of the color of text that the player writes.</p>
  </li>
</ul>

<p>When the player interacts with the component, you can use the following events to trigger the execution of code:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">OnFocus()</code>: The player clicked on the UI component and has a cursor on it.</li>
  <li><code class="language-plaintext highlighter-rouge">OnBlur()</code>: The player clicked away and the cursor is gone.</li>
  <li><code class="language-plaintext highlighter-rouge">OnChanged()</code>: The player typed or deleted something to change the string on the component.</li>
  <li><code class="language-plaintext highlighter-rouge">OnTextSubmit()</code>: The player hit the <code class="language-plaintext highlighter-rouge">Enter</code> key to submit this string.</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">textInput</span><span class="p">.</span><span class="nx">onChanged</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OnChanged</span><span class="p">((</span><span class="nx">data</span><span class="p">:</span> <span class="p">{</span> <span class="nl">value</span><span class="p">:</span> <span class="kr">string</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">inputTextState</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">value</span>
<span class="p">})</span>
</code></pre></div></div>

<h2 id="open-the-ui">Open the UI</h2>

<p>You can have the code of your scene make the the UI visible when specific events occurs, for example at the end of a game to display the final score.</p>

<p>To do this, simply set the <code class="language-plaintext highlighter-rouge">visible</code> property of the main <code class="language-plaintext highlighter-rouge">UICanvas</code> component that wraps the UI to <em>true</em> or <em>false</em>.</p>

<p>If the UI is clickable, or has clickable parts, you should also set the <code class="language-plaintext highlighter-rouge">isPointerBlocker</code> property to <em>true</em> or <em>false</em>, so that the player can freely click in the world space when the UI is not on the way.</p>

<p>The following code adds a cube to the world-space of the scene that opens the UI when clicked.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">uiTrigger</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="kd">const</span> <span class="nx">transform</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Transform</span><span class="p">({</span>
  <span class="na">position</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Vector3</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span>
  <span class="na">scale</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Vector3</span><span class="p">(</span><span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">),</span>
<span class="p">})</span>
<span class="nx">uiTrigger</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">transform</span><span class="p">)</span>

<span class="nx">uiTrigger</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">OnPointerDown</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">canvas</span><span class="p">.</span><span class="nx">visible</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="nx">canvas</span><span class="p">.</span><span class="nx">isPointerBlocker</span> <span class="o">=</span> <span class="kc">true</span>
  <span class="p">})</span>
<span class="p">)</span>

<span class="nx">uiTrigger</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">BoxShape</span><span class="p">())</span>
<span class="nx">engine</span><span class="p">.</span><span class="nx">addEntity</span><span class="p">(</span><span class="nx">uiTrigger</span><span class="p">)</span>
</code></pre></div></div>

<p>Players can close the UI by clicking the icon on the top-right corner. Note that when closing the UI in this way, they won‚Äôt see any more UI components appear in your scene, even if the code sets them to visible.</p>

<p>It‚Äôs a good practice to add a button on your UI elements for closing them in a way that doesn‚Äôt prevent other UI components from being visible in the future.</p>

<p>You might also want to close the UI automatically when a specific event occurs, for example when a new match of a game starts.</p>

<p>To do this, simply set the <code class="language-plaintext highlighter-rouge">visible</code> property of the main <code class="language-plaintext highlighter-rouge">UIScreenSpace</code> component that wraps the UI to <em>false</em>.</p>

<p>If the UI is clickable, or has clickable parts, you should also set the <code class="language-plaintext highlighter-rouge">isPointerBlocker</code> property to <em>false</em>, so that the player can freely click in the world space.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UICanvas</span><span class="p">()</span>

<span class="kd">const</span> <span class="nx">close</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UIImage</span><span class="p">(</span><span class="nx">canvas</span><span class="p">,</span> <span class="k">new</span> <span class="nx">Texture</span><span class="p">(</span><span class="dl">"</span><span class="s2">icon.png</span><span class="dl">"</span><span class="p">))</span>
<span class="nx">close</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">clickable-image</span><span class="dl">"</span>
<span class="nx">close</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">120px</span><span class="dl">"</span>
<span class="nx">close</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">30px</span><span class="dl">"</span>
<span class="nx">close</span><span class="p">.</span><span class="nx">sourceWidth</span> <span class="o">=</span> <span class="mi">92</span>
<span class="nx">close</span><span class="p">.</span><span class="nx">sourceHeight</span> <span class="o">=</span> <span class="mi">91</span>
<span class="nx">close</span><span class="p">.</span><span class="nx">vAlign</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">bottom</span><span class="dl">"</span>
<span class="nx">close</span><span class="p">.</span><span class="nx">isPointerBlocker</span> <span class="o">=</span> <span class="kc">true</span>
<span class="nx">close</span><span class="p">.</span><span class="nx">onClick</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">OnClick</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">clicked on the close image</span><span class="dl">"</span><span class="p">)</span>
  <span class="nx">canvas</span><span class="p">.</span><span class="nx">visible</span> <span class="o">=</span> <span class="kc">false</span>
  <span class="nx">canvas</span><span class="p">.</span><span class="nx">isPointerBlocker</span> <span class="o">=</span> <span class="kc">false</span>
<span class="p">})</span>
</code></pre></div></div>
<p>````</p>
:ET