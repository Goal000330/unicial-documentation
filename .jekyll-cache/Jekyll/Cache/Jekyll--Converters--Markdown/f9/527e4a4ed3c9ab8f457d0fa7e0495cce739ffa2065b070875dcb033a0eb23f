I"ǫ<h2 id="materials">Materials</h2>

<p>Materials can be applied to entities that use primitive shapes (cube, sphere, plane, etc) by setting them as a component.</p>

<p>You can either set a <code class="language-plaintext highlighter-rouge">Material</code> or a <code class="language-plaintext highlighter-rouge">BasicMaterial</code> component. Each entity can only have one of these. Both components have several fields that allow you to configure the properties of the material, add a texture and set the texture’s mapping.</p>

<p>You can’t add material components to <em>glTF</em> models. <em>glTF</em> models include their own materials that are implicitly imported into a scene together with the model.</p>

<p>When importing a 3D model with its own materials, keep in mind that not all shaders are supported by the Decentraland engine. Only standard materials and PBR (physically based rendering) materials are supported. See <a href="/3d-modeling/materials/">external 3D model considerations</a> for more details.</p>

<h2 id="create-and-apply-a-material">Create and apply a material</h2>

<p>The following example creates a material, sets some of its fields to give it a red color and metallic properties, and then applies the material to an entity that also has a <code class="language-plaintext highlighter-rouge">boxShape</code> component.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Create entity and assign shape</span>
<span class="kd">const</span> <span class="nx">myEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">BoxShape</span><span class="p">())</span>

<span class="c1">//Create material and configure its fields</span>
<span class="kd">const</span> <span class="nx">myMaterial</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Material</span><span class="p">()</span>
<span class="nx">myMaterial</span><span class="p">.</span><span class="nx">albedoColor</span> <span class="o">=</span> <span class="nx">Color3</span><span class="p">.</span><span class="nx">Blue</span><span class="p">()</span>
<span class="nx">myMaterial</span><span class="p">.</span><span class="nx">metallic</span> <span class="o">=</span> <span class="mf">0.9</span>
<span class="nx">myMaterial</span><span class="p">.</span><span class="nx">roughness</span> <span class="o">=</span> <span class="mf">0.1</span>

<span class="c1">//Assign the material to the entity</span>
<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">myMaterial</span><span class="p">)</span>
</code></pre></div></div>

<p>See <a href="https://github.com/decentraland/ecs-reference">component reference</a>) for a full list of all the fields that can be configured in a <code class="language-plaintext highlighter-rouge">Material</code> of <code class="language-plaintext highlighter-rouge">BasicMaterial</code> component.</p>

<h2 id="basic-materials">Basic materials</h2>

<p>Instead of the <code class="language-plaintext highlighter-rouge">Material</code> component, you can define a material through the <code class="language-plaintext highlighter-rouge">BasicMaterial</code> entity. This creates materials that are shadeless and are not affected by light. This is useful for creating user interfaces that should be consistently bright, it can also be used to give your scene a more minimalist look.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myMaterial</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BasicMaterial</span><span class="p">()</span>
</code></pre></div></div>

<blockquote>
  <p>Note: Basic materials have some property names that are different from those in normal materials. For example it uses <code class="language-plaintext highlighter-rouge">texture</code> instead of <code class="language-plaintext highlighter-rouge">albedoTexture</code>.</p>
</blockquote>

<h2 id="material-colors">Material colors</h2>

<p>Give a material a plain color. In a <code class="language-plaintext highlighter-rouge">BasicMaterial</code> component, you set the <code class="language-plaintext highlighter-rouge">color</code> field. In a <code class="language-plaintext highlighter-rouge">Material</code> component, you set the <code class="language-plaintext highlighter-rouge">albedoColor</code> field. Albedo colors respond to light and can include shades on them.</p>

<p>All color fields are either of type <code class="language-plaintext highlighter-rouge">Color3</code> or <code class="language-plaintext highlighter-rouge">Color4</code>. <code class="language-plaintext highlighter-rouge">Color3</code> holds three values, for <em>Red</em>, <em>Green</em> and <em>Blue</em>. Each of these numbers is between <em>0</em> and <em>1</em>. <code class="language-plaintext highlighter-rouge">Color4</code> holds those same three values and a fourth value for <em>Alpha</em>, also between <em>0</em> and <em>1</em>, where <em>0</em> is completely transparent and <em>1</em> is completely opaque.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">myMaterial</span><span class="p">.</span><span class="nx">albedoColor</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Color3</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>Note: If you set any color in <code class="language-plaintext highlighter-rouge">albedoColor</code> to a value higher than <em>1</em>, it will appear as <em>emissive</em>, with more intensity the higher the value. So for example, <code class="language-plaintext highlighter-rouge">new Color3(15, 0, 0)</code> produces a very bright red glowing color.</p>
</blockquote>

<p>You can also pick predetermined colors using the following functions of the <code class="language-plaintext highlighter-rouge">Color3</code> object:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">red</span> <span class="o">=</span> <span class="nx">Color3</span><span class="p">.</span><span class="nx">Red</span><span class="p">()</span>

<span class="kd">let</span> <span class="nx">green</span> <span class="o">=</span> <span class="nx">Color3</span><span class="p">.</span><span class="nx">Green</span><span class="p">()</span>

<span class="kd">let</span> <span class="nx">blue</span> <span class="o">=</span> <span class="nx">Color3</span><span class="p">.</span><span class="nx">Blue</span><span class="p">()</span>

<span class="kd">let</span> <span class="nx">black</span> <span class="o">=</span> <span class="nx">Color3</span><span class="p">.</span><span class="nx">Black</span><span class="p">()</span>

<span class="kd">let</span> <span class="nx">white</span> <span class="o">=</span> <span class="nx">Color3</span><span class="p">.</span><span class="nx">White</span><span class="p">()</span>

<span class="kd">let</span> <span class="nx">purple</span> <span class="o">=</span> <span class="nx">Color3</span><span class="p">.</span><span class="nx">Purple</span><span class="p">()</span>

<span class="kd">let</span> <span class="nx">magenta</span> <span class="o">=</span> <span class="nx">Color3</span><span class="p">.</span><span class="nx">Magenta</span><span class="p">()</span>

<span class="kd">let</span> <span class="nx">yellow</span> <span class="o">=</span> <span class="nx">Color3</span><span class="p">.</span><span class="nx">Yellow</span><span class="p">()</span>

<span class="kd">let</span> <span class="nx">gray</span> <span class="o">=</span> <span class="nx">Color3</span><span class="p">.</span><span class="nx">Gray</span><span class="p">()</span>

<span class="kd">let</span> <span class="nx">teal</span> <span class="o">=</span> <span class="nx">Color3</span><span class="p">.</span><span class="nx">Teal</span><span class="p">()</span>
</code></pre></div></div>

<p>You can otherwise pick a random color using the following function:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Pick a random color</span>
<span class="kd">let</span> <span class="nx">green</span> <span class="o">=</span> <span class="nx">Color3</span><span class="p">.</span><span class="nx">Random</span><span class="p">()</span>
</code></pre></div></div>

<p>If you prefer to specify a color using hexadecimal values, as is often done in JavaScript web development, you can do so using the <code class="language-plaintext highlighter-rouge">.FromHexString()</code> function</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">gray</span> <span class="o">=</span> <span class="nx">Color3</span><span class="p">.</span><span class="nx">FromHexString</span><span class="p">(</span><span class="dl">"</span><span class="s2">#CCCCCCC</span><span class="dl">"</span><span class="p">)</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">Color3</code> object also includes a lot of other functions to add, substract, compare, lerp, or convert the format of colors.</p>

<p>You can also edit the following fields in a <code class="language-plaintext highlighter-rouge">Material</code> component to fine-tune how its color is percieved:</p>

<ul>
  <li><em>emissiveColor</em>: The color emitted from the material.</li>
  <li><em>ambientColor</em>: AKA <em>Diffuse Color</em> in other nomenclature.</li>
  <li><em>reflectionColor</em>: The color reflected from the material.</li>
  <li><em>reflectivityColor</em>: AKA <em>Specular Color</em> in other nomenclature.</li>
</ul>

<h4 id="change-a-color-gradually">Change a color gradually</h4>

<p>Change a color gradually with linear interpolation between two colors, using the <code class="language-plaintext highlighter-rouge">.Lerp()</code> function.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// This variable will store the ratio between both colors</span>
<span class="kd">let</span> <span class="nx">colorRatio</span> <span class="o">=</span> <span class="mi">0</span>

<span class="c1">// Define colors</span>
<span class="kd">const</span> <span class="nx">red</span> <span class="o">=</span> <span class="nx">Color3</span><span class="p">.</span><span class="nx">Red</span><span class="p">()</span>
<span class="kd">const</span> <span class="nx">yellow</span> <span class="o">=</span> <span class="nx">Color3</span><span class="p">.</span><span class="nx">Yellow</span><span class="p">()</span>

<span class="c1">// Create material</span>
<span class="kd">const</span> <span class="nx">myMaterial</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Material</span><span class="p">()</span>

<span class="c1">// This system changes the value of colorRatio every frame, and sets a new color on the material</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">ColorSystem</span> <span class="k">implements</span> <span class="nx">ISystem</span> <span class="p">{</span>
  <span class="nx">update</span><span class="p">(</span><span class="nx">dt</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">myMaterial</span><span class="p">.</span><span class="nx">albedoColor</span> <span class="o">=</span> <span class="nx">Color3</span><span class="p">.</span><span class="nx">Lerp</span><span class="p">(</span><span class="nx">red</span><span class="p">,</span> <span class="nx">yellow</span><span class="p">,</span> <span class="nx">colorRatio</span><span class="p">)</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">colorRatio</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">colorRatio</span> <span class="o">+=</span> <span class="mf">0.01</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Add the system to the engine</span>
<span class="nx">engine</span><span class="p">.</span><span class="nx">addSystem</span><span class="p">(</span><span class="nx">ColorSystem</span><span class="p">)</span>
</code></pre></div></div>

<p>The example above changes the color of a material from red to yellow, incrementally shifting it on every frame.</p>

<h2 id="using-textures">Using textures</h2>

<p>Reference an image file as a texture by creating a <code class="language-plaintext highlighter-rouge">Texture</code> component. You can then reference this texture component in the fields of both <code class="language-plaintext highlighter-rouge">Material</code> and <code class="language-plaintext highlighter-rouge">BasicMaterial</code> components.</p>

<p>In a <code class="language-plaintext highlighter-rouge">Material</code> component, you can set the <code class="language-plaintext highlighter-rouge">albedoTexture</code> field to a texture image. Albedo textures respond to light and can include shades on them.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Create entity and assign shape</span>
<span class="kd">const</span> <span class="nx">myEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">BoxShape</span><span class="p">())</span>

<span class="c1">//Create texture</span>
<span class="kd">const</span> <span class="nx">myTexture</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Texture</span><span class="p">(</span><span class="dl">"</span><span class="s2">materials/wood.png</span><span class="dl">"</span><span class="p">)</span>

<span class="c1">//Create a material</span>
<span class="kd">const</span> <span class="nx">myMaterial</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Material</span><span class="p">()</span>
<span class="nx">myMaterial</span><span class="p">.</span><span class="nx">albedoTexture</span> <span class="o">=</span> <span class="nx">myTexture</span>

<span class="c1">//Assign the material to the entity</span>
<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">myMaterial</span><span class="p">)</span>
</code></pre></div></div>

<p>While creating a texture, you can also pass additional parameters:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">samplingMode</code>: Determines how pixels in the texture are stretched or compressed when rendered</li>
  <li><code class="language-plaintext highlighter-rouge">wrap</code>: Determines how a texture is tiled onto an object (see <a href="#texture-wrapping">Texture Wrapping</a>)</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">smokeTexture</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Texture</span><span class="p">(</span><span class="dl">"</span><span class="s2">textures/smoke-puff3.png</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">wrap</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
<span class="p">})</span>
</code></pre></div></div>

<h4 id="textures-from-an-external-url">Textures from an external URL</h4>

<p>You can point the texture of your material to an external URL instead of an internal path in the scene project.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myTexture</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Texture</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">https://wearable-api.decentraland.org/v2/collections/community_contest/wearables/cw_tuxedo_tshirt_upper_body/thumbnail</span><span class="dl">"</span>
<span class="p">)</span>

<span class="kd">const</span> <span class="nx">myMaterial</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Material</span><span class="p">()</span>
<span class="nx">myMaterial</span><span class="p">.</span><span class="nx">albedoTexture</span> <span class="o">=</span> <span class="nx">myTexture</span>
</code></pre></div></div>

<p>The URL must start with <code class="language-plaintext highlighter-rouge">https</code>, <code class="language-plaintext highlighter-rouge">http</code> URLs aren’t supported. The site where the image is hosted should also have <a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">CORS policies (Cross Origin Resource Sharing)</a> that permit externally accessing it.</p>

<h4 id="textures-on-basic-materials">Textures on basic materials</h4>

<p>In a <code class="language-plaintext highlighter-rouge">BasicMaterial</code> component, you can set the <code class="language-plaintext highlighter-rouge">texture</code> field to an image texture. This will render a texture that isn’t affected by lighting.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Create entity and assign shape</span>
<span class="kd">const</span> <span class="nx">myEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">BoxShape</span><span class="p">())</span>

<span class="c1">//Create texture</span>
<span class="kd">const</span> <span class="nx">myTexture</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Texture</span><span class="p">(</span><span class="dl">"</span><span class="s2">materials/wood.png</span><span class="dl">"</span><span class="p">)</span>

<span class="c1">//Create material and configure its fields</span>
<span class="kd">const</span> <span class="nx">myMaterial</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BasicMaterial</span><span class="p">()</span>
<span class="nx">myMaterial</span><span class="p">.</span><span class="nx">texture</span> <span class="o">=</span> <span class="nx">myTexture</span>

<span class="c1">//Assign the material to the entity</span>
<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">myMaterial</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="multi-layered-textures">Multi-layered textures</h4>

<p>It also allows you to use several image files as layers to compose more realistic textures, for example including a <code class="language-plaintext highlighter-rouge">bumpTexture</code> and a <code class="language-plaintext highlighter-rouge">refractionTexture</code>.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Create entity and assign shape</span>
<span class="kd">const</span> <span class="nx">myEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">BoxShape</span><span class="p">())</span>

<span class="c1">//Create texture</span>
<span class="kd">const</span> <span class="nx">myTexture</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Texture</span><span class="p">(</span><span class="dl">"</span><span class="s2">materials/wood.png</span><span class="dl">"</span><span class="p">)</span>

<span class="c1">//Create second texture</span>
<span class="kd">const</span> <span class="nx">myBumpTexture</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Texture</span><span class="p">(</span><span class="dl">"</span><span class="s2">materials/woodBump.png</span><span class="dl">"</span><span class="p">)</span>

<span class="c1">//Create material and configure its fields</span>
<span class="kd">const</span> <span class="nx">myMaterial</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Material</span><span class="p">()</span>
<span class="nx">myMaterial</span><span class="p">.</span><span class="nx">albedoTexture</span> <span class="o">=</span> <span class="nx">myTexture</span>
<span class="nx">myMaterial</span><span class="p">.</span><span class="nx">bumpTexture</span> <span class="o">=</span> <span class="nx">myBumpTexture</span>

<span class="c1">//Assign the material to the entity</span>
<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">myMaterial</span><span class="p">)</span>
</code></pre></div></div>

<p>In the example above, the image for the material is located in a <code class="language-plaintext highlighter-rouge">materials</code> folder, which is located at root level of the scene project folder.</p>

<blockquote>
  <p>Tip: We recommend keeping your texture image files separate in a <code class="language-plaintext highlighter-rouge">/materials</code> folder inside your scene.</p>
</blockquote>

<blockquote>
  <p>Tip: A material can have multiple layers of texture, you can see what these are on a source code editor by clicking <code class="language-plaintext highlighter-rouge">.</code> and letting the autocomplete menu show you the list.</p>
</blockquote>

<h4 id="texture-wrapping">Texture wrapping</h4>

<p>If you want the texture to be mapped to specific scale or alignment on your entities, then you need to configure <em>uv</em> properties on the <a href="/development-guide/shape-components/">shape components</a>.</p>

<p>You set <em>u</em> and <em>v</em> coordinates on the 2D image of the texture to correspond to the vertices of the shape. The more vertices the entity has, the more <em>uv</em> coordinates need to be defined on the texture, a plane for example needs to have 8 <em>uv</em> points defined, 4 for each of its two faces.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Create material and configure fields</span>
<span class="kd">const</span> <span class="nx">myMaterial</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BasicMaterial</span><span class="p">()</span>
<span class="kd">let</span> <span class="nx">myTexture</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Texture</span><span class="p">(</span><span class="dl">"</span><span class="s2">materials/atlas.png</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">wrap</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">samplingMode</span><span class="p">:</span> <span class="mi">0</span> <span class="p">})</span>
<span class="nx">myMaterial</span><span class="p">.</span><span class="nx">texture</span> <span class="o">=</span> <span class="nx">myTexture</span>

<span class="c1">//Create shape component</span>
<span class="kd">const</span> <span class="nx">plane</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PlaneShape</span><span class="p">()</span>

<span class="c1">// map the texture to each of the four corners of the plane</span>
<span class="nx">plane</span><span class="p">.</span><span class="nx">uvs</span> <span class="o">=</span> <span class="p">[</span>
  <span class="mi">0</span><span class="p">,</span> <span class="mf">0.75</span><span class="p">,</span>

  <span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.75</span><span class="p">,</span>

  <span class="mf">0.25</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>

  <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>

  <span class="mi">0</span><span class="p">,</span> <span class="mf">0.75</span><span class="p">,</span>

  <span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.75</span><span class="p">,</span>

  <span class="mf">0.25</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>

  <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
<span class="p">]</span>

<span class="c1">//Create entity and assign shape and material</span>
<span class="kd">const</span> <span class="nx">myEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">plane</span><span class="p">)</span>
<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">myMaterial</span><span class="p">)</span>
</code></pre></div></div>

<p>The following example includes a function that simplifies the setting of uvs. The <code class="language-plaintext highlighter-rouge">setUVs</code> function defined here receives a number of rows and columns as parameters, and sets the uvs so that the texture image is repeated a specific number of times.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myMaterial</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BasicMaterial</span><span class="p">()</span>
<span class="kd">let</span> <span class="nx">myTexture</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Texture</span><span class="p">(</span><span class="dl">"</span><span class="s2">materials/atlas.png</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">wrap</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">samplingMode</span><span class="p">:</span> <span class="mi">0</span><span class="p">})</span>
<span class="nx">myMaterial</span><span class="p">.</span><span class="nx">texture</span> <span class="o">=</span> <span class="nx">myTexture</span>

<span class="kd">const</span> <span class="nx">myPlane</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="kd">const</span> <span class="nx">plane</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PlaneShape</span><span class="p">()</span>
<span class="nx">myPlane</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">plane</span><span class="p">)</span>

<span class="nx">engine</span><span class="p">.</span><span class="nx">addEntity</span><span class="p">(</span><span class="nx">myPlane</span><span class="p">)</span>
<span class="nx">myPlane</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">myMaterial</span><span class="p">)</span>
<span class="nx">plane</span><span class="p">.</span><span class="nx">uvs</span> <span class="o">=</span> <span class="nx">setUVs</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>

<span class="kd">function</span> <span class="nx">setUVs</span><span class="p">(</span><span class="nx">rows</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">cols</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[</span>
    <span class="c1">// North side of unrortated plane</span>
    <span class="mi">0</span><span class="p">,</span> <span class="c1">//lower-left corner</span>
    <span class="mi">0</span><span class="p">,</span>

    <span class="nx">cols</span><span class="p">,</span> <span class="c1">//lower-right corner</span>
    <span class="mi">0</span><span class="p">,</span>

    <span class="nx">cols</span><span class="p">,</span> <span class="c1">//upper-right corner</span>
    <span class="nx">rows</span><span class="p">,</span>

    <span class="mi">0</span><span class="p">,</span> <span class="c1">//upper left-corner</span>
    <span class="nx">rows</span><span class="p">,</span>

    <span class="c1">// South side of unrortated plane</span>
    <span class="nx">cols</span><span class="p">,</span> <span class="c1">// lower-right corner</span>
    <span class="mi">0</span><span class="p">,</span>

    <span class="mi">0</span><span class="p">,</span> <span class="c1">// lower-left corner</span>
    <span class="mi">0</span><span class="p">,</span>

    <span class="mi">0</span><span class="p">,</span> <span class="c1">// upper-left corner</span>
    <span class="nx">rows</span><span class="p">,</span>

    <span class="nx">cols</span><span class="p">,</span> <span class="c1">// upper-right corner</span>
    <span class="nx">rows</span><span class="p">,</span>
  <span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>For setting the UVs for a <code class="language-plaintext highlighter-rouge">BoxShape</code> component, the same structure applies. Each of the 6 faces of the cube takes 4 values, one for each corner. All of these 24 values are listed as a single array.</p>

<p>You can also define how the texture is tiled if the mapping spans more than the dimensions of the texture image. The <code class="language-plaintext highlighter-rouge">Texture</code> component lets you configure the wrapping mode by setting the <code class="language-plaintext highlighter-rouge">wrap</code> field. The wrapping mode can be <code class="language-plaintext highlighter-rouge">CLAMP</code>, <code class="language-plaintext highlighter-rouge">WRAP</code> or <code class="language-plaintext highlighter-rouge">MIRROR</code>.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">CLAMP</code>: The texture is only displayed once in the specified size. The rest of the surface of the mesh is left transparent.</li>
  <li><code class="language-plaintext highlighter-rouge">WRAP</code>: The texture is repeated as many times as it fits in the mesh, using the specified size.</li>
  <li><code class="language-plaintext highlighter-rouge">MIRROR</code>: As in wrap, the texture is repeated as many times as it fits, but the orientation of these repetitions is mirrored.</li>
</ul>

<blockquote>
  <p>Note: The <code class="language-plaintext highlighter-rouge">wrap</code> property must be set when instancing the texture, after that it’s a read-only property.</p>
</blockquote>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myTexture</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Texture</span><span class="p">(</span><span class="dl">"</span><span class="s2">materials/atlas.png</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">wrap</span><span class="p">:</span> <span class="mi">2</span> <span class="p">})</span>
</code></pre></div></div>

<p>The example above sets the wrapping mode to <code class="language-plaintext highlighter-rouge">MIRROR</code>.</p>

<blockquote>
  <p>Note: Uv properties are currently only available on <code class="language-plaintext highlighter-rouge">PlaneShape</code> and on <code class="language-plaintext highlighter-rouge">BoxShape</code> components.</p>
</blockquote>

<h4 id="texture-scaling">Texture scaling</h4>

<p>When textures are stretched or shrinked to a different size from the original texture image, this can sometimes create artifacts. In a 3D environment, the effects of perspective cause this naturally. There are various <a href="https://en.wikipedia.org/wiki/Texture_filtering">texture filtering</a> algorithms that exist to compensate for this in different ways. The <code class="language-plaintext highlighter-rouge">Texture</code> object uses the <em>bilinear</em> algorithm by default, but it lets you configure it to use the <em>nearest neighbor</em> or <em>trilinear</em> algorithms instead by setting the <code class="language-plaintext highlighter-rouge">samplingMode</code> property.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myTexture</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Texture</span><span class="p">(</span><span class="dl">"</span><span class="s2">materials/myTexture.png</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">samplingMode</span><span class="p">:</span> <span class="mi">1</span> <span class="p">})</span>
</code></pre></div></div>

<p>The example above uses a nearest neighbor algorithm. This setting is ideal for pixel art style graphics, as the contours will remain sharply marked as the texture is seen larger on screen instead of being blurred.</p>

<h2 id="avatar-portraits">Avatar Portraits</h2>

<p>To display a thumbnail image of any player, create an <code class="language-plaintext highlighter-rouge">AvatarTexture</code>, passing the address of an existing player. This creates a texture from a 256x256 image of the player, showing head and shoulders. The player is displayed wearing the set of wearables that the current server last recorded.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myTexture</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AvatarTexture</span><span class="p">(</span><span class="dl">"</span><span class="s2">0xAAAAAAAAAAAAAAAAA</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">myMaterial</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Material</span><span class="p">()</span>
<span class="nx">myMaterial</span><span class="p">.</span><span class="nx">albedoTexture</span> <span class="o">=</span> <span class="nx">myTexture</span>
</code></pre></div></div>

<h2 id="transparent-materials">Transparent materials</h2>

<p>To make a material with a plain color transparent, simply define the color as a <code class="language-plaintext highlighter-rouge">Color4</code>, and set the 4th value to something between <em>0</em> and <em>1</em>. The closer to <em>1</em>, the more opaque it will be.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">transparentRed</span> <span class="o">=</span> <span class="nx">Color4</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">)</span>
</code></pre></div></div>

<p>To make a material with texture transparent:</p>

<ul>
  <li>Set an image in <code class="language-plaintext highlighter-rouge">alphaTexture</code>.</li>
</ul>

<blockquote>
  <p>Note: This must be a single-channel image. In this image use the color red to determine what parts of the real texture should be transparent.</p>
</blockquote>

<ul>
  <li>
    <p>Optionally set the <code class="language-plaintext highlighter-rouge">transparencyMode</code> to: - <code class="language-plaintext highlighter-rouge">OPAQUE</code>: No transparency at all - <code class="language-plaintext highlighter-rouge">ALPHATEST</code>: Each pixel is either completely opaque or completely transparent, based on a threshold. - <code class="language-plaintext highlighter-rouge">ALPHABLEND</code>: Intermediate values are possible based on the value of each pixel.</p>
  </li>
  <li>
    <p>If you set the <code class="language-plaintext highlighter-rouge">transparencyMode</code> to <code class="language-plaintext highlighter-rouge">ALPHATEST</code>, you can fine tune the threshold used to determine if each pixel is transparent or not. Set the <code class="language-plaintext highlighter-rouge">alphaTest</code> property between <em>0</em> and <em>1</em>. By default its value is <em>0.5</em>.</p>
  </li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myTexture</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Texture</span><span class="p">(</span><span class="dl">"</span><span class="s2">materials/texture.png</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">alphaTexture</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Texture</span><span class="p">(</span><span class="dl">"</span><span class="s2">materials/alpha.png</span><span class="dl">"</span><span class="p">)</span>

<span class="c1">// Material with ALPHABLEND</span>
<span class="kd">const</span> <span class="nx">myMaterial</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Material</span><span class="p">()</span>
<span class="nx">myMaterial</span><span class="p">.</span><span class="nx">albedoTexture</span> <span class="o">=</span> <span class="nx">myTexture</span>
<span class="nx">myMaterial</span><span class="p">.</span><span class="nx">alphaTexture</span> <span class="o">=</span> <span class="nx">alphaTexture</span>

<span class="c1">// Material with ALPHATEST</span>
<span class="kd">const</span> <span class="nx">myMaterial2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Material</span><span class="p">()</span>
<span class="nx">myMaterial2</span><span class="p">.</span><span class="nx">albedoTexture</span> <span class="o">=</span> <span class="nx">myTexture</span>
<span class="nx">myMaterial2</span><span class="p">.</span><span class="nx">alphaTexture</span> <span class="o">=</span> <span class="nx">alphaTexture</span>
<span class="nx">myMaterial</span><span class="p">.</span><span class="nx">transparencyMode</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1">// ALPHATEST</span>
<span class="nx">myMaterial</span><span class="p">.</span><span class="nx">alphaTest</span> <span class="o">=</span> <span class="mf">0.3</span>
</code></pre></div></div>

<h2 id="casting-no-shadows">Casting no shadows</h2>

<p>To prevent a material from casting shadows over other objects, both <code class="language-plaintext highlighter-rouge">Material</code> and <code class="language-plaintext highlighter-rouge">BasicMaterial</code> have a <code class="language-plaintext highlighter-rouge">castShadows</code> property that you can set to <em>false</em>. This property is always <em>true</em> by default.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">noShadowMaterial</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Material</span><span class="p">()</span>
<span class="nx">noShadowMaterial</span><span class="p">.</span><span class="nx">albedoColor</span> <span class="o">=</span> <span class="nx">Color4</span><span class="p">.</span><span class="nx">White</span><span class="p">()</span>
<span class="nx">noShadowMaterial</span><span class="p">.</span><span class="nx">castShadows</span> <span class="o">=</span> <span class="kc">false</span>
</code></pre></div></div>

<h2 id="reuse-materials">Reuse materials</h2>

<p>If multiple entities in your scene use a same material, there’s no need to create an instance of the material component for each. All entities can share one same instance, this keeps your scene lighter to load and prevents you from exceeding the maximum amount of materials per scene.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Create entities and assign shapes</span>
<span class="kd">const</span> <span class="nx">box</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BoxShape</span><span class="p">()</span>
<span class="kd">const</span> <span class="nx">myEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">box</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">mySecondEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="nx">mySecondEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">box</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">myThirdEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="nx">myThirdEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">box</span><span class="p">)</span>

<span class="c1">//Create material and configure fields</span>
<span class="kd">const</span> <span class="nx">myMaterial</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Material</span><span class="p">()</span>
<span class="nx">myMaterial</span><span class="p">.</span><span class="nx">albedoColor</span> <span class="o">=</span> <span class="nx">Color3</span><span class="p">.</span><span class="nx">Blue</span><span class="p">()</span>

<span class="c1">//Assign same material to all entities</span>
<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">myMaterial</span><span class="p">)</span>
<span class="nx">mySecondEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">myMaterial</span><span class="p">)</span>
<span class="nx">myThirdEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">myMaterial</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="video-playing">Video playing</h2>

<p>To stream video from a URL into a material, or play a video from a file stored in the scene, see <a href="/development-guide/video-playing/">video playing</a>.</p>

<p>The video is used as a texture on a material, you can set any of the other properties of materials to alter how the video screen looks.</p>
:ET