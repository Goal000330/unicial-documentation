I"u2<h2 id="custom-components">Custom components</h2>

<p>If you need to store information about an entity that isn’t handled by the default components of the SDK (see <a href="https://github.com/decentraland/ecs-reference">component reference</a> ), then you can create a custom type of component on your scene.</p>

<p>Tip: Custom components can be defined in your scene’s <code class="language-plaintext highlighter-rouge">.ts</code> file, but for larger projects we recommend defining them in a separate <code class="language-plaintext highlighter-rouge">ts</code> file and importing them.</p>

<p>A component can store as many fields as you want.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Component</span><span class="p">(</span><span class="dl">"</span><span class="s2">wheelSpin</span><span class="dl">"</span><span class="p">)</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">WheelSpin</span> <span class="p">{</span>
  <span class="nl">spinning</span><span class="p">:</span> <span class="nx">boolean</span>
  <span class="nx">speed</span><span class="p">:</span> <span class="kr">number</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Note that we’re defining two names for the component: <code class="language-plaintext highlighter-rouge">wheelSpin</code> and <code class="language-plaintext highlighter-rouge">WheelSpin</code> in this case. The <em>class name</em>, the one in upper case, is the one you use to add the component to entities. The <em>space name</em>, the one starting with a lower case letter, can mostly be ignored, except if you want to use it as an <a href="#interchangeable-components">Interchangeable component</a>.</p>

<p>Once defined, you can use the component in the entities of your scene:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create entities</span>
<span class="kd">const</span> <span class="nx">wheel</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="kd">const</span> <span class="nx">wheel2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>

<span class="c1">// Create instances of the component</span>
<span class="nx">wheel</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">WheelSpin</span><span class="p">())</span>
<span class="nx">wheel2</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">WheelSpin</span><span class="p">())</span>

<span class="c1">// Set values on component</span>
<span class="nx">wheel</span><span class="p">.</span><span class="nx">getComponent</span><span class="p">(</span><span class="nx">WheelSpin</span><span class="p">).</span><span class="nx">spinning</span> <span class="o">=</span> <span class="kc">true</span>
<span class="nx">wheel</span><span class="p">.</span><span class="nx">getComponent</span><span class="p">(</span><span class="nx">WheelSpin</span><span class="p">).</span><span class="nx">speed</span> <span class="o">=</span> <span class="mi">10</span>
<span class="nx">wheel2</span><span class="p">.</span><span class="nx">getComponent</span><span class="p">(</span><span class="nx">WheelSpin</span><span class="p">).</span><span class="nx">spinning</span> <span class="o">=</span> <span class="kc">false</span>
</code></pre></div></div>

<p>Each entity that has the component added to it is instancing a new copy of it, holding specific data for that entity.</p>

<h4 id="constructors">Constructors</h4>

<p>Adding a constructor to a component allows you to configure its values in the same expression as you create an instance of it.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Component</span><span class="p">(</span><span class="dl">"</span><span class="s2">wheelSpin</span><span class="dl">"</span><span class="p">)</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">WheelSpin</span> <span class="p">{</span>
  <span class="nl">spinning</span><span class="p">:</span> <span class="nx">boolean</span>
  <span class="nx">speed</span><span class="p">:</span> <span class="kr">number</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">spinning</span><span class="p">:</span> <span class="nx">boolean</span><span class="p">,</span> <span class="nx">speed</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">spinning</span> <span class="o">=</span> <span class="nx">spinning</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">speed</span> <span class="o">=</span> <span class="nx">speed</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If the component includes a constructor, you can use the following syntax:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create entity</span>
<span class="kd">const</span> <span class="nx">wheel</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>

<span class="c1">// Create instance of component and set its values</span>
<span class="nx">wheel</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">WheelSpin</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
</code></pre></div></div>

<blockquote>
  <p>Tip: If you use a source code editor, when instancing a component that has a constructor, you can see what the parameters are by mousing over the expression.</p>
</blockquote>

<!-- img -->

<p>You can make the parameters optional by setting default values on each. If there are default values and you don’t declare the parameters when instancing a component, it will use the default.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Component</span><span class="p">(</span><span class="dl">"</span><span class="s2">wheelSpin</span><span class="dl">"</span><span class="p">)</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">WheelSpin</span> <span class="p">{</span>
  <span class="nl">spinning</span><span class="p">:</span> <span class="nx">boolean</span>
  <span class="nx">speed</span><span class="p">:</span> <span class="kr">number</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">spinning</span><span class="p">?:</span> <span class="nx">boolean</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">speed</span><span class="p">?:</span> <span class="kr">number</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">spinning</span> <span class="o">=</span> <span class="nx">spinning</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">speed</span> <span class="o">=</span> <span class="nx">speed</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create entity</span>
<span class="kd">const</span> <span class="nx">wheel</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>

<span class="c1">// Create instance of component with default values</span>
<span class="nx">wheel</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">WheelSpin</span><span class="p">())</span>
</code></pre></div></div>

<h4 id="inheritance-from-other-components">Inheritance from other components</h4>

<p>You can create a component that’s based on an existing one and leverage all of its existing methods and fields.</p>

<p>The following example defines a <em>Velocity</em> component, which inherits its fields and methods from the already existing <em>Vector3</em> component.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Component</span><span class="p">(</span><span class="dl">"</span><span class="s2">velocity</span><span class="dl">"</span><span class="p">)</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">Velocity</span> <span class="kd">extends</span> <span class="nx">Vector3</span> <span class="p">{</span>
  <span class="c1">// x, y and z fields are inherited from Vector</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">x</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">y</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">z</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="interchangeable-components">Interchangeable components</h4>

<p>Certain components intentionally can’t coexist in a single entity. For example, an entity can’t have both <code class="language-plaintext highlighter-rouge">BoxShape</code> and <code class="language-plaintext highlighter-rouge">PlaneShape</code>. If you assign one using <code class="language-plaintext highlighter-rouge">.addComponentOrReplace()</code>, you overwrite the other if present.</p>

<p>You can create custom components that follow this same behavior against each other, where it only makes sense for each entity to have only one of them assigned.</p>

<p>To define components that are interchangeable and that occupy a same <em>space</em> in an entity, set the same name for both on the component’s internal name:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Component</span><span class="p">(</span><span class="dl">"</span><span class="s2">animal</span><span class="dl">"</span><span class="p">)</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">Dog</span> <span class="p">{</span>
 <span class="p">(...)</span>
<span class="p">}</span>

<span class="p">@</span><span class="nd">Component</span><span class="p">(</span><span class="dl">"</span><span class="s2">animal</span><span class="dl">"</span><span class="p">)</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">Cat</span> <span class="p">{</span>
 <span class="p">(...)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the example above, note that both components occupy the <em>animal</em> space. Each entity in the scene can only have one <em>animal</em> component assigned.</p>

<p>If you use <code class="language-plaintext highlighter-rouge">.addComponentOrReplace()</code> to assign a <em>Dog</em> component to an entity that has a <em>Cat</em> component, then the <em>Dog</em> component will overwrite the <em>Cat</em> component.</p>

<h2 id="components-as-flags">Components as flags</h2>

<p>You may want to add a component that simply flags an entity to differentiate it from others, without using it to store any data.</p>

<p>This is especially useful when using <a href="/development-guide/component-groups/">Component groups</a>. Since component groups list entities based on components they own, a simple flag component can tell entities apart from others.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Component</span><span class="p">(</span><span class="dl">"</span><span class="s2">myFlag</span><span class="dl">"</span><span class="p">)</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">MyFlag</span> <span class="p">{}</span>
</code></pre></div></div>
:ET