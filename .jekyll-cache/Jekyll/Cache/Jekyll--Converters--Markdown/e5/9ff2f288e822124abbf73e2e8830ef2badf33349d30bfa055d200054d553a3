I"]¼<p>You can set the <em>position</em>, <em>rotation</em> and <em>scale</em> of an entity by using the <code class="language-plaintext highlighter-rouge">Transform</code> component. This can be used on any entity, which can also a primitive shape component (cube, sphere, plane, etc) or a 3D model component (<code class="language-plaintext highlighter-rouge">GLTFShape</code>).</p>

<p><img src="/images/media/ecs-simple-components.png" alt="nested entities" width="400" /></p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create a new entity</span>
<span class="kd">const</span> <span class="nx">ball</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>

<span class="c1">// Add a transform component to the entity</span>
<span class="nx">ball</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">Transform</span><span class="p">())</span>
<span class="nx">ball</span><span class="p">.</span><span class="nx">getComponent</span><span class="p">(</span><span class="nx">Transform</span><span class="p">).</span><span class="nx">position</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="nx">ball</span><span class="p">.</span><span class="nx">getComponent</span><span class="p">(</span><span class="nx">Transform</span><span class="p">).</span><span class="nx">scale</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<p>For brevity, you can also create a <code class="language-plaintext highlighter-rouge">Transform</code> entity and give it initial values in a single statement, passing it an object that can optionally include <em>position</em>, <em>rotation</em> and <em>scale</em> properties.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">Transform</span><span class="p">({</span>
    <span class="na">position</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Vector3</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span>
    <span class="na">rotation</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Quaternion</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
    <span class="na">scale</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Vector3</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
  <span class="p">})</span>
<span class="p">)</span>
</code></pre></div></div>

<p>To move, rotate or resize an entity in your scene, change the values on this component incrementally, frame by frame. See <a href="/development-guide/move-entities/">Move entities</a> for more details and best practices. You can also use the helper functions in the <a href="https://www.npmjs.com/package/decentraland-ecs-utils">utils library</a> to achieve this more easily.</p>

<h2 id="position">Position</h2>

<p><code class="language-plaintext highlighter-rouge">position</code> is a <em>3D vector</em>, it sets the position of the entityâ€™s center on all three axes, stored as a <code class="language-plaintext highlighter-rouge">Vector3</code> object.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create transform with a predefined position</span>
<span class="kd">let</span> <span class="nx">myTransform</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Transform</span><span class="p">({</span> <span class="na">position</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="p">})</span>

<span class="c1">// Set each axis individually</span>
<span class="nx">myTransform</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">3</span>
<span class="nx">myTransform</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="mi">1</span>
<span class="nx">myTransform</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span> <span class="o">=</span> <span class="mi">3</span>

<span class="c1">// Set the position with three numbers (x, y, z)</span>
<span class="nx">myTransform</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>

<span class="c1">// Set the position with an object</span>
<span class="nx">myTransform</span><span class="p">.</span><span class="nx">position</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vector3</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>Note: When setting the value of the position with an object, you can either use a <code class="language-plaintext highlighter-rouge">Vector3</code> object, or any other object with <em>x</em>, <em>y</em> and <em>z</em> fields.</p>
</blockquote>

<p>When setting a position, keep the following considerations in mind:</p>

<ul>
  <li>
    <p>The numbers in a position vector represent <em>meters</em> (unless the entity is a child of a scaled entity).</p>
  </li>
  <li>
    <p>A scene that is made up of a single parcel measures 16m x 16m. The center of the scene (at ground level) is at <code class="language-plaintext highlighter-rouge">x:8, y:0, z:8</code>. If the scene is made up of multiple parcels, then the center will vary depending on their arrangement.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">x:0, y:0, z:0</code> refers to the <em>South-West</em> corner of the sceneâ€™s base parcel, at ground level.</p>

    <blockquote>
      <p>Tip: When viewing a scene preview, a compass appears in the (0,0,0) point of the scene with labels for each axis as reference.</p>
    </blockquote>

    <blockquote>
      <p>Tip: Take your <em>left</em> hand, your index finger (pointing forward) is the <em>z</em> axis, your middle finger (pointing sideways) is the <em>x</em> axis, and your thumb (pointing up) is the <em>y</em> axis.</p>
    </blockquote>

    <blockquote>
      <p>Note: You can change the base parcel of a scene by editing the <code class="language-plaintext highlighter-rouge">base</code> attribute of <em>scene.json</em>.</p>
    </blockquote>
  </li>
  <li>
    <p>If an entity is a child of another, then <code class="language-plaintext highlighter-rouge">x:0, y:0, z:0</code> refers to the center of its parent entity, wherever it is in the scene.</p>
  </li>
  <li>
    <p>Every entity in your scene must be positioned within the bounds of the parcels it occupies at all times. If an entity leaves these boundaries, it will raise an error.</p>

    <blockquote>
      <p>Tip: When viewing a scene in preview mode, entities that are out of bounds are highlighted in <em>red</em>.</p>
    </blockquote>
  </li>
  <li>
    <p>Your scene is also limited in height. The more parcels that make up the scene, the higher youâ€™re allowed to build. See <a href="/development-guide/scene-limitations/">scene limitations</a> for more details.</p>
  </li>
</ul>

<h2 id="rotation">Rotation</h2>

<p><code class="language-plaintext highlighter-rouge">rotation</code> is stored as a <a href="https://en.wikipedia.org/wiki/Quaternion"><em>quaternion</em></a>, a system of four numbers, <em>x</em>, <em>y</em>, <em>z</em> and <em>w</em>.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create transform with a predefined rotation in Quaternions</span>
<span class="kd">let</span> <span class="nx">myTransform</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Transform</span><span class="p">({</span> <span class="na">rotation</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Quaternion</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="p">})</span>

<span class="c1">// Set rotation with four numbers (x, y, z, w)</span>
<span class="nx">myTransform</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

<span class="c1">// Set rotation with a quaternion</span>
<span class="nx">myTransform</span><span class="p">.</span><span class="nx">rotation</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Quaternion</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<p>You can also set the rotation field with <a href="https://en.wikipedia.org/wiki/Euler_angles"><em>Euler</em> angles</a>, the more common <em>x</em>, <em>y</em> and <em>z</em> notation with numbers that go from 0 to 360 that most people are familiar with. To use Euler angles, use one of the following notations:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create transform with a predefined rotation in Euler angles</span>
<span class="kd">let</span> <span class="nx">myTransform</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Transform</span><span class="p">({</span> <span class="na">rotation</span><span class="p">:</span> <span class="nx">Quaternion</span><span class="p">.</span><span class="nx">Euler</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="p">})</span>

<span class="c1">// Use the .setEuler() function</span>
<span class="nx">myTransform</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">setEuler</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">180</span><span class="p">)</span>

<span class="c1">// Set the `eulerAngles` field</span>
<span class="nx">myTransform</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">eulerAngles</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<p>When using a <em>3D vector</em> to represent Euler angles, <em>x</em>, <em>y</em> and <em>z</em> represent the rotation in that axis, measured in degrees. A full turn requires 360 degrees.</p>

<blockquote>
  <p>Note: If you set the rotation using <em>Euler</em> angles, the rotation value is still stored internally as a quaternion.</p>
</blockquote>

<p>When you retrieve the rotation of an entity, it returns a quaternion by default. To obtain the rotation expressed as in Euler angles, get the <code class="language-plaintext highlighter-rouge">.eulerAngles</code> field:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">myEntity</span><span class="p">.</span><span class="nx">getComponent</span><span class="p">(</span><span class="nx">Transform</span><span class="p">).</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">eulerAngles</span>
</code></pre></div></div>

<h4 id="add-rotations">Add Rotations</h4>

<p>Another option is to perform a <code class="language-plaintext highlighter-rouge">rotate</code> operation on an existing transform, which adds to its current rotation. The <code class="language-plaintext highlighter-rouge">rotate</code> operation takes a vector that indicates a direction, and a number of degrees to rotate. In the following example, weâ€™re tilting an entity 15 degrees along the X axis, which adds to whatever rotation it initially had:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">myTransform</span><span class="p">.</span><span class="nx">rotate</span><span class="p">(</span><span class="k">new</span> <span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">15</span><span class="p">)</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">rotate</code> operation is useful when dealing with an entity thatâ€™s rotated in multiple axis, for example both X and Y. The following example sets an original rotation in the Y axis, and then rotates the Transform along the X axis:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">myTransform</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">setEuler</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="nx">myTransform</span><span class="p">.</span><span class="nx">rotate</span><span class="p">(</span><span class="k">new</span> <span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">15</span><span class="p">)</span>
</code></pre></div></div>

<p>Note that this produces a different result than if you simply set the initial rotation to <code class="language-plaintext highlighter-rouge">(15, 90, 0)</code>. In the example, the rotation along the X axis doesnâ€™t occur along the original X axis of the Transform, but instead it occurs along the <em>tilted</em> X axis that results from the initial rotation.</p>

<h2 id="face-the-player">Face the player</h2>

<p>Add a <em>Billboard</em> component to an entity so that it always rotates to face the player.</p>

<p>Billboards were a common technique used in 3D games of the 90s, where most entities were 2D planes that always faced the player. The same idea can also be used to rotate a 3D model.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">box</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="nx">box</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">BoxShape</span><span class="p">())</span>
<span class="nx">box</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">Transform</span><span class="p">({</span>
    <span class="na">position</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Vector3</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span>
  <span class="p">})</span>
<span class="p">)</span>
<span class="nx">box</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">Billboard</span><span class="p">())</span>
<span class="nx">engine</span><span class="p">.</span><span class="nx">addEntity</span><span class="p">(</span><span class="nx">box</span><span class="p">)</span>
</code></pre></div></div>

<p>You can choose which axis to rotate as a billboard. For example, if the Billboard of a cube only rotates in the Y axis, it will follow the player when moving at ground level, but the player will be able to look at it from above or from below.</p>

<p>The three optional parameters when creating a <code class="language-plaintext highlighter-rouge">Billboard</code> component are booleans that refer to the <em>x</em>, <em>y</em>, and <em>z</em> axis. They are all <code class="language-plaintext highlighter-rouge">true</code> by default.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// rotate on all three axis</span>
<span class="kd">let</span> <span class="nx">FullBillboard</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Billboard</span><span class="p">())</span>

<span class="c1">// rotate only in the X axis</span>
<span class="kd">let</span> <span class="nx">XBillboard</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Billboard</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="kc">false</span> <span class="p">,</span><span class="kc">false</span><span class="p">)</span>

<span class="c1">// rotate only in theY axis</span>
<span class="kd">let</span> <span class="nx">YBillboard</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Billboard</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="kc">true</span> <span class="p">,</span><span class="kc">false</span><span class="p">)</span>

<span class="c1">// rotate only in the Z axis</span>
<span class="kd">let</span> <span class="nx">ZBillboard</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Billboard</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="kc">false</span> <span class="p">,</span><span class="kc">true</span><span class="p">)</span>
</code></pre></div></div>

<p>Tip: To rotate an entity so that it follows the player around while at ground level, give it <em>Y</em> axis rotation.</p>

<p>Billboards are also very handy to add to <em>text</em> entities, since it makes them always legible.</p>

<p>The <code class="language-plaintext highlighter-rouge">rotation</code> value of the entityâ€™s <code class="language-plaintext highlighter-rouge">Transform</code> component doesnâ€™t change as the billboard follows players around.</p>

<p>If an entity has both a <code class="language-plaintext highlighter-rouge">Billboard</code> component and <code class="language-plaintext highlighter-rouge">Transform</code> component with <code class="language-plaintext highlighter-rouge">rotation</code> values, players will see the entity rotating as a billboard. If the billboard doesnâ€™t affect all axis, the remaining axis will be rotated according to the <code class="language-plaintext highlighter-rouge">Transform</code> component.</p>

<blockquote>
  <p>Note: If there are multiple players present at the same time, each will see the entities with billboard mode facing them.</p>
</blockquote>

<h2 id="face-a-set-of-coordinates">Face a set of coordinates</h2>

<p>You can use <code class="language-plaintext highlighter-rouge">lookAt()</code> on the Transform component to orient an entity fo face a specific point in space by simply passing it that pointâ€™s coordinates. This is a way to avoid dealing with the math for calculating the necessary angles.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create a transform</span>
<span class="kd">let</span> <span class="nx">myTransform</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Transform</span><span class="p">()</span>

<span class="c1">// Rotate to face the coordinates (4, 1, 2)</span>
<span class="nx">myTransform</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="k">new</span> <span class="nx">Vector3</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</code></pre></div></div>

<p>This field requires a <em>Vector3</em> object as a value, or any object with <em>x</em>, <em>y</em> and <em>z</em> attributes. This vector indicates the coordinates of the position of the point in the scene to look at.</p>

<p>The <code class="language-plaintext highlighter-rouge">lookAt()</code> function has a second optional argument that sets the global direction for <em>up</em> to use as reference. For most cases, you wonâ€™t need to set this field.</p>

<h2 id="scale">Scale</h2>

<p><code class="language-plaintext highlighter-rouge">scale</code> is also a <em>3D vector</em>, stored as a <code class="language-plaintext highlighter-rouge">Vector3</code> object, including the scale factor on the <em>x</em>, <em>y</em> and <em>z</em> axis. The shape of the entity scaled accordingly, whether itâ€™s a primitive or a 3D model.</p>

<p>You can either use the <code class="language-plaintext highlighter-rouge">set()</code> operation to provide a value for each of the three axis, or use <code class="language-plaintext highlighter-rouge">setAll()</code> to provide a single number and maintain the entityâ€™s proportions as you scale it.</p>

<p>The default scale is 1, so assign a value larger to 1 to stretch an entity or smaller than 1 to shrink it.</p>

<p>You can either set each dimension individually, or use the <code class="language-plaintext highlighter-rouge">set</code> operation to set all dimensions.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create a transform with a predefined scale</span>
<span class="kd">let</span> <span class="nx">myTransform</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Transform</span><span class="p">({</span> <span class="na">scale</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Vector3</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="p">})</span>

<span class="c1">// Set each dimension individually</span>
<span class="nx">myTransform</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span>
<span class="nx">myTransform</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="mi">5</span>
<span class="nx">myTransform</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">z</span> <span class="o">=</span> <span class="mi">1</span>

<span class="c1">// Set the whole scale with one expression  (x, y, z)</span>
<span class="nx">myTransform</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

<span class="c1">// Set the scale with a single number to maintain proportions</span>
<span class="nx">myTransform</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">setAll</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

<span class="c1">// Set the scale with an object</span>
<span class="nx">myTransform</span><span class="p">.</span><span class="nx">scale</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">)</span>
</code></pre></div></div>

<p>When setting the value of the scale with an object, you can either use a <code class="language-plaintext highlighter-rouge">Vector3</code> object, or any other object with <em>x</em>, <em>y</em> and <em>z</em> fields.</p>

<h2 id="inherit-transformations-from-parent">Inherit transformations from parent</h2>

<p>When an entity is nested inside another, the child entities inherit components from the parents. This means that if a parent entity is positioned, scaled or rotated, its children are also affected. The position, rotation and scale values of children entities donâ€™t override those of the parents, instead these are compounded.</p>

<p>If a parent entity is scaled, all position values of its children are also scaled.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create entities</span>
<span class="kd">const</span> <span class="nx">parentEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="kd">const</span> <span class="nx">childEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>

<span class="c1">// Set one as the parent of the other</span>
<span class="nx">childEntity</span><span class="p">.</span><span class="nx">setParent</span><span class="p">(</span><span class="nx">parentEntity</span><span class="p">)</span>

<span class="c1">// Create a transform for the parent</span>
<span class="kd">let</span> <span class="nx">parentTransform</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Transform</span><span class="p">({</span>
  <span class="na">position</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Vector3</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
  <span class="na">scale</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Vecot3</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">),</span>
<span class="p">})</span>

<span class="nx">parentEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">parentTransform</span><span class="p">)</span>

<span class="c1">// Create a transform for the child</span>
<span class="kd">let</span> <span class="nx">childTransform</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Transform</span><span class="p">({</span>
  <span class="na">position</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
<span class="p">})</span>

<span class="nx">childEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">childTransform</span><span class="p">)</span>

<span class="c1">// Add entities to the engine</span>
<span class="nx">engine</span><span class="p">.</span><span class="nx">addEntity</span><span class="p">(</span><span class="nx">parentEntity</span><span class="p">)</span>
</code></pre></div></div>

<p>You can use an invisible entity with no shape component to wrap a set of other entities. This entity wonâ€™t be visible in the rendered scene, but can be used to group its children and apply a transform to all of them.</p>

<blockquote>
  <p>Note: Child entities should not be explicitly added to the engine, as they are already added via their parent entity.</p>
</blockquote>

<h2 id="attach-an-entity-to-an-avatar">Attach an entity to an avatar</h2>

<p>To fix an entityâ€™s position to an avatar, add an <code class="language-plaintext highlighter-rouge">AttachToAvatar</code> component to the entity.</p>

<!-- You can pick different anchor points on the avatar, most of these points are linked to the player's armature and follow the player's animations. For example, when using the `RightHand` anchor point the attached entity will move when the avatar waves or swings their arms while running, just as if the player was holding the entity in their hand. -->

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">this</span><span class="p">.</span><span class="nx">addComponentOrReplace</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">AttachToAvatar</span><span class="p">({</span>
    <span class="na">avatarId</span><span class="p">:</span> <span class="dl">'</span><span class="s1">0xAAAAAAAAAAAAAAAAA</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">anchorPointId</span><span class="p">:</span> <span class="nx">AttachToAvatarAnchorPointId</span><span class="p">.</span><span class="nx">NameTag</span><span class="p">,</span>
  <span class="p">})</span>
<span class="p">)</span>
</code></pre></div></div>

<p>When creating an <code class="language-plaintext highlighter-rouge">AttachToAvatar</code> component, you must pass an object with the following data:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">avatarId</code>: The ID of the player to attach to. This is the same as the playerâ€™s Ethereum address, for those players connected with an Ethereum wallet.</li>
  <li><code class="language-plaintext highlighter-rouge">anchorPointId</code>: What anchor point on the avatar to attach the entity.</li>
</ul>

<p>The following anchor points are available on the player:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">NameTag</code>: Floats right above the playerâ€™s name tag, isnâ€™t affected by the playerâ€™s animations.</p>

    <blockquote>
      <p>Note: The name tag height is dynamically adjusted based on the height of the wearables a player has on. So a player wearing a tall hat will have their name tag a little bit higher than others.</p>
    </blockquote>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Position</code>: The playerâ€™s overall position.</p>

    <blockquote>
      <p>Note: The height of this anchor point currently may vary between the local playerâ€™s avatar and other players, this is subject to change in future versions. The NameTag anchor point should be more reliable.</p>
    </blockquote>
  </li>
</ul>

<!--
- `RightHand`: Is fixed on the player's right hand
- `LeftHand`: Is fixed on the player's left hand

...etc
-->

<blockquote>
  <p>Note: Future SDK versions will include alternative anchor points on the avatar that will accompany the avatar animations.</p>
</blockquote>

<p>Entity rendering is locally determined on each instance of the scene. Attaching an entity on one player doesnâ€™t make it visible to everyone seeing that player.</p>

<blockquote>
  <p>Note: Entities attached to an avatar must stay within scene bounds to be rendered. If a player walks out of your scene, any attached entities stop being rendered until the player walks back in. Smart wearables donâ€™t have this limitation.</p>
</blockquote>

<p>The <code class="language-plaintext highlighter-rouge">AttachToAvatar</code> component overwrites the <code class="language-plaintext highlighter-rouge">Transform</code> component, a single entity canâ€™t have both an <code class="language-plaintext highlighter-rouge">AttachToAvatar</code> and a <code class="language-plaintext highlighter-rouge">Transform</code> component at the same time.</p>

<p>If you need to position an entity with an offset from the anchor point on the avatar, or a different rotation or scale, attach a parent entity to the anchor point. You can then set the visible model on a child entity to that parent, and give this child its own Transform component to describe its shifts from the anchor point.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">parent</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>

<span class="nx">parent</span><span class="p">.</span><span class="nx">addComponentOrReplace</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">AttachToAvatar</span><span class="p">({</span>
    <span class="na">avatarId</span><span class="p">:</span> <span class="dl">'</span><span class="s1">0xAAAAAAAAAAAAAAAAA</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">anchorPointId</span><span class="p">:</span> <span class="nx">AttachToAvatarAnchorPointId</span><span class="p">.</span><span class="nx">NameTag</span><span class="p">,</span>
  <span class="p">})</span>
<span class="p">)</span>
<span class="nx">engine</span><span class="p">.</span><span class="nx">addEntity</span><span class="p">(</span><span class="nx">parent</span><span class="p">)</span>

<span class="kd">let</span> <span class="nx">child</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="nx">child</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">ConeShape</span><span class="p">())</span>
<span class="nx">child</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">Transform</span><span class="p">({</span>
    <span class="na">rotation</span><span class="p">:</span> <span class="nx">Quaternion</span><span class="p">.</span><span class="nx">Euler</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">180</span><span class="p">),</span>
    <span class="na">scale</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Vector3</span><span class="p">(</span><span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">),</span>
    <span class="na">position</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
  <span class="p">})</span>
<span class="p">)</span>
<span class="nx">child</span><span class="p">.</span><span class="nx">setParent</span><span class="p">(</span><span class="nx">parent</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="obtain-the-avatarid">Obtain the avatarId</h4>

<p>To attach an entity to an avatar, you must provide the userâ€™s ID in the field <code class="language-plaintext highlighter-rouge">avatarId</code>. There are <a href="/development-guide/user-data/#get-player-data">various ways</a> to obtain this data.</p>

<blockquote>
  <p>Note: For those players connected with an Ethereum wallet, their <code class="language-plaintext highlighter-rouge">userId</code> is the same as their Ethereum address.</p>
</blockquote>

<ul>
  <li>Fetch the local playerâ€™s <code class="language-plaintext highlighter-rouge">userId</code> via <code class="language-plaintext highlighter-rouge">getUserData()</code>.</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">getPlayerData</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@decentraland/Players</span><span class="dl">"</span>

<span class="nx">executeTask</span><span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">getUserData</span><span class="p">()</span>
  <span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">userId</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<ul>
  <li>Fetch the <code class="language-plaintext highlighter-rouge">userId</code> for all other nearby players via <code class="language-plaintext highlighter-rouge">getConnectedPlayers()</code></li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">getConnectedPlayers</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">@decentraland/Players</span><span class="dl">"</span>

<span class="nx">executeTask</span><span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">players</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">getConnectedPlayers</span><span class="p">()</span>
  <span class="nx">players</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">player</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">player is nearby: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">player</span><span class="p">.</span><span class="nx">userId</span><span class="p">)</span>
  <span class="p">})</span>
<span class="p">})</span>
</code></pre></div></div>

<p>See other ways to fetch other userâ€™s IDs in <a href="/development-guide/user-data/get-player-data">Get Player Data</a>.</p>

<h4 id="attach-to-player-using-attachable-deprecated">Attach to player using Attachable (deprecated)</h4>

<p>Note: This method for attaching entities to the player is deprecated. Use the <code class="language-plaintext highlighter-rouge">AttachToAvatar</code> component instead.</p>

<p>Set an entity as a child of the <code class="language-plaintext highlighter-rouge">Attachable.FIRST_PERSON_CAMERA</code> object to fix the entity to the player and follow the playerâ€™s movements.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">followTheCamera</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="nx">followTheCamera</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">BoxShape</span><span class="p">())</span>
<span class="nx">followTheCamera</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">Transform</span><span class="p">({</span>
    <span class="na">position</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
  <span class="p">})</span>
<span class="p">)</span>
<span class="nx">engine</span><span class="p">.</span><span class="nx">addEntity</span><span class="p">(</span><span class="nx">followTheCamera</span><span class="p">)</span>
<span class="nx">followTheCamera</span><span class="p">.</span><span class="nx">setParent</span><span class="p">(</span><span class="nx">Attachable</span><span class="p">.</span><span class="nx">FIRST_PERSON_CAMERA</span><span class="p">)</span>
</code></pre></div></div>

<p>If the attached entity has a Transform component, it will be positioned relative to the playerâ€™s position, and keep that relative position as the player moves or rotates.</p>

<p>To fix an entityâ€™s rotation only in the <em>x</em> axis to the player, set an entity as a child of the <code class="language-plaintext highlighter-rouge">Attachable.AVATAR</code> object. The entity will then rotate with the player when looking around at ground level, but it wonâ€™t accompany the playerâ€™s rotation when looking up or down.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">followAvatar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="nx">followAvatar</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">BoxShape</span><span class="p">())</span>
<span class="nx">followAvatar</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">Transform</span><span class="p">({</span>
    <span class="na">position</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
  <span class="p">})</span>
<span class="p">)</span>
<span class="nx">engine</span><span class="p">.</span><span class="nx">addEntity</span><span class="p">(</span><span class="nx">followAvatar</span><span class="p">)</span>
<span class="nx">followAvatar</span><span class="p">.</span><span class="nx">setParent</span><span class="p">(</span><span class="nx">Attachable</span><span class="p">.</span><span class="nx">AVATAR</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>Note: To set an entity as a child of <code class="language-plaintext highlighter-rouge">Attachable.FIRST_PERSON_CAMERA</code> or <code class="language-plaintext highlighter-rouge">Attachable.AVATAR</code>, you need to first add the entity to the engine. If you attempt to set the entity as child of the player <em>before</em> adding it to the engine, it will raise an error.</p>
</blockquote>

<p>Both <code class="language-plaintext highlighter-rouge">Attachable.FIRST_PERSON_CAMERA</code> and <code class="language-plaintext highlighter-rouge">Attachable.AVATAR</code> behave similarly, but have subtle differences:</p>

<p>With <code class="language-plaintext highlighter-rouge">Attachable.FIRST_PERSON_CAMERA</code>:</p>

<ul>
  <li>The entity is at eye-level of the player</li>
  <li>In 1st person: Entity rotates on all axis, staying in a fixed position on the camera.</li>
  <li>In 3rd person: Entity rotates on only the <em>y</em> axis with the camera</li>
</ul>

<p>With <code class="language-plaintext highlighter-rouge">Attachable.AVATAR</code>:</p>

<ul>
  <li>The entity is arm or waist level of the player</li>
  <li>1st person: Entity rotates on only the <em>y</em> axis with the camera</li>
  <li>3rd person: Entity rotates on only the <em>y</em> axis with the camera</li>
</ul>

<p>This gif illustrates the difference in 1st person. The pink entity uses <code class="language-plaintext highlighter-rouge">Attachable.AVATAR</code>, the white object uses <code class="language-plaintext highlighter-rouge">Attachable.FIRST_PERSON_CAMERA</code>.</p>

<p><img src="/images/media/gifs/attach-to-player.gif" alt="attach entity to player" width="400" /></p>

<p>If several players are in the same scene, they will each experience the entity as attached to themselves. They will not see the entity attached to other players.</p>

<p>For example, in a multiplayer scene where players can pick up boxes and move them around, the recommended approach is to make boxes that are being carried by other players invisible. So that only players that are currently carrying a box see them attached to themselves.</p>

<h2 id="scene-boundaries">Scene boundaries</h2>

<p>All entities in your scene must fit within the scene boundaries, as whatâ€™s outside those boundaries is parcels of land that are owned by other players.</p>

<p>When running a preview of your scene, any entities outside the sceneâ€™s parcels are colored red and their colliders are removed. When deployed to Decentraland, any entities outside the parcels will not be rendered at all by the engine.</p>

<p>The position of entities in your scene is constantly being checked as they move, if an entity leaves the scene and then returns it will be removed and then rendered normally again.</p>

<p>A grid on the sceneâ€™s ground shows the limits of the scene, which by default rage from 0 to 16 on the <em>x</em> and <em>z</em> axis, and up to 20 on the <em>y</em> axis. Youâ€™re free to place entities underground, below 0 on the <em>y</em> axis.</p>

<blockquote>
  <p>Tip: If your scene needs more parcels, you can add them in the projectâ€™s <code class="language-plaintext highlighter-rouge">scene.json</code> file. See <a href="/development-guide/scene-metadata/">Scene metadata</a> for instructions. Once added, you should see the grid extend to cover the additional parcels.</p>
</blockquote>

<p>Itâ€™s important to note that the <em>entire</em> 3D model must be within the sceneâ€™s bounds. This includes the modelâ€™s <em>bounding box</em>. Some 3D models may have bounding boxes that unnecessarily extend beyond the meshes themselves, and it can sometimes be tricky to tell when this happens. When an entity extends beyond the sceneâ€™s boundaries, in the preview youâ€™ll see a cube that marks these bounding boxes. The entire cube must fit within your scene.</p>

<p><img src="/images/media/bounding-box.png" alt="" /></p>

<p>If an entityâ€™s cube extends beyond the shape of its meshes, you might need to edit the 3D model in an external editor to reduce these margins, or to <em>bake</em> the rotation and scale of the meshes in the model.</p>
:ET