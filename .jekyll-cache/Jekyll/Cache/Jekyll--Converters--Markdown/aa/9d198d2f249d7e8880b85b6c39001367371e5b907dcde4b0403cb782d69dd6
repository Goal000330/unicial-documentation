I"<p>3D models are imported into decentraland in glTF format. There are a number of supported features that these models can include. This section goes over ways to make them compatible with Decentraland and best practices.</p>

<p>See <a href="/development-guide/entity-positioning/">Set entity position</a> for information on how you can configure a 3D model in a Decentraland scene to set its position, scale, etc.</p>

<p>Keep in mind that all models, their shaders and their textures must be within the parameters of the <a href="/development-guide/scene-limitations/">scene limitations</a>.</p>

<h2 id="supported-3d-model-formats">Supported 3D model formats</h2>

<p>All 3D models in Decentraland must be in glTF format. <a href="https://www.khronos.org/gltf">glTF</a> (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies.</p>

<p>glTF models can have either a <em>.gltf</em> or a <em>.glb</em> extension. glTF files are human-readable, you can open one in a text editor and read it like a JSON file. This is useful, for example, to verify that animations are properly attached and to check for their names. glb files are binary, so they’re not readable but they are considerably smaller in size, which is good for the scene’s performance.</p>

<p>We recommend using <em>.gltf</em> while you’re working on a scene, but then switching to <em>.glb</em> when uploading it.</p>

<p>The following aspects of a 3D model can either be embedded in a <em>glTF</em> file or referenced externally:</p>

<ul>
  <li>Textures can either be embedded or referenced from an external image file.</li>
  <li>Binary data about geometry, animations, and other buffer-related aspects of the model can either be embedded or referenced from an external <em>.bin</em> file.</li>
</ul>

<blockquote>
  <p>Note: Animations <em>must</em> be embedded inside the <em>glTF</em> file to use in Decentraland.</p>
</blockquote>

<h4 id="export-to-gltf-from-blender">Export to glTF from Blender</h4>

<p>When exporting 3D models that include multiple animations, make sure that all animations are embedded in the model. To do this, open the <em>NLA editor</em> and click <em>Stash</em> to add each animation to the model.</p>

<p>We recommend using the following export settings when exporting models with animations:</p>

<p><img src="/images/media/blender-export-settings-animations.png" alt="Blender export menu" width="250" /></p>

<h4 id="export-to-gltf-from-3d-studio-max">Export to glTF from 3D Studio Max</h4>

<p>3D Studio Max doesn’t support exporting to glTF by default, but you can install a plugin to enable it.</p>

<ol>
  <li>Download the plugin from <a href="https://github.com/BabylonJS/Exporters/tree/master/3ds%20Max">this link</a>.</li>
  <li>Install the plugin by following <a href="http://doc.babylonjs.com/resources/3dsmax#how-to-install-the-3ds-max-plugin">these instructions</a>.</li>
  <li>Export glTF files using the plugin by following <a href="http://doc.babylonjs.com/resources/3dsmax_to_gltf">these instructions</a>.</li>
</ol>

<h4 id="export-to-gltf-from-maya">Export to glTF from Maya</h4>

<p>Maya doesn’t support exporting to glTF by default, but you can install a plugin to enable it.</p>

<ol>
  <li>Install the plugin by following <a href="http://doc.babylonjs.com/resources/maya">these instructions</a>.</li>
  <li>Export glTF files using the plugin by following <a href="http://doc.babylonjs.com/resources/maya_to_gltf#pbr-materials">these instructions</a>.</li>
</ol>

<blockquote>
  <p>Note: As an alternative, you can try <a href="https://github.com/WonderMediaProductions/Maya2glTF">this other plugin</a> too.</p>
</blockquote>

<h4 id="export-to-gltf-from-unity">Export to glTF from Unity</h4>

<p>Unity doesn’t support exporting to glTF by default, but you can install a plugin to enable it.</p>

<p>Download the plugin from <a href="https://github.com/sketchfab/Unity-glTF-Exporter">this link</a>.</p>

<blockquote>
  <p>Note: As an alternative, you can try <a href="https://assetstore.unity.com/packages/tools/utilities/collada-exporter-for-unity2017-99793">this other plugin</a> too.</p>
</blockquote>

<h4 id="export-to-gltf-from-sketchup">Export to glTF from SketchUp</h4>

<p>SketchUp doesn’t support exporting to glTF by default, but you can install a plugin to enable it.</p>

<p>Download the plugin from <a href="https://extensions.sketchup.com/en/content/gltf-exporter">this link</a>.</p>

<h4 id="preview-a-gltf-model">Preview a glTF model</h4>

<p>A quick and easy way to preview the contents of a glTF model before importing it into a scene is to use the <a href="https://sandbox.babylonjs.com/">Babylon.js Sandbox</a>. Just drag and drop the glTF file (and its <em>.bin</em> file if applicable) into the canvas to view the model.</p>

<p>In the sandbox you can also view the animations that are embedded in the model, select which to display by picking it out of a dropdown menu.</p>

<p><img src="/images/media/babylon-sandbox.png" alt="" /></p>

<h4 id="why-we-use-gltf">Why we use glTF</h4>

<p>Compared to the older <em>OBJ format</em>, which supports only vertices, normals, texture coordinates, and basic materials,
glTF provides a more powerful set of features that includes:</p>

<ul>
  <li>Hierarchical objects</li>
  <li>Skeletal structure and animation</li>
  <li>More robust materials and shaders</li>
  <li>Scene information (light sources, cameras)</li>
</ul>

<p>Compared to <em>COLLADA</em>, the supported features are very similar. However, because glTF focuses on providing a
“transmission format” rather than an editor format, it is more interoperable with web technologies.</p>

<p>Consider this analogy: the .PSD (Adobe Photoshop) format is helpful for editing 2D images, but images must then be converted to .JPG for use
on the web. In the same way, COLLADA may be used to edit a 3D asset, but glTF is a simpler way of transmitting it while rendering the same result.</p>

<h2 id="convert-fbx-into-gltf">Convert fbx into glTF</h2>

<p><em>.fbx</em> is a very popular standard for 3D models. It’s not supported by our engine, but you can easily export an <em>.fbx</em> model to <em>.gltf</em> format.</p>

<p>We recommend using these tools:</p>

<ul>
  <li>
    <p><a href="https://github.com/facebookincubator/FBX2glTF">Facebook’s CLI tool</a>: this is the most robust alternative, but requires using the command line.</p>
  </li>
  <li>
    <p><a href="https://blackthread.io/gltf-converter">Blackthread</a>: This the most complete web based tool. Less robust than the CLI, but a lot easier to use.</p>
  </li>
  <li>
    <p><a href="https://modelconverter.com/convert.html">Modelconverter</a>: Another easy-to-use web based tool.</p>
  </li>
</ul>

<h2 id="optimize-a-gltf">Optimize a glTF</h2>

<p>The following tool offers some optimizations that will make 3D models lighter and faster to download for players in your scene.</p>

<p><a href="https://github.com/AnalyticalGraphicsInc/gltf-pipeline">glTF pipeline</a></p>

<p>Among other things, it converts <em>.gltf</em> format into <em>.glb</em>, which is binary and so occupies a lot less. It also places texture files outside the 3D model, which allows you to use the same texture on multiple models.</p>

<blockquote>
  <p>Note: <em>.glb</em> format by default always has textures embedded in the file. The engine can’t recognize two embedded textures as the same, they need to be external files that share a same hash.</p>
</blockquote>

<h2 id="see-also">See also</h2>

<p>The following pages also cover topics related to 3D models for Decentraland:</p>

<ul>
  <li><a href="/3d-modeling/materials/">Materials</a></li>
  <li><a href="/3d-modeling/meshes/">Meshes</a></li>
  <li><a href="/3d-modeling/colliders/">Colliders</a></li>
  <li><a href="/3d-modeling/animations/">Animations</a></li>
</ul>
:ET