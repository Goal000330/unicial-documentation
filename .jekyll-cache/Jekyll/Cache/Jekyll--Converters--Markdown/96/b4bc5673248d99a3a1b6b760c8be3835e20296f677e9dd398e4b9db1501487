I"
¼<p>Decentraland accepts events from pointer clicks, a primary button and a secondary button.</p>

<p>Clicks can be done either with a mouse, a touch screen, a VR controller or some other device, these all generate the same type of event.</p>

<p>The primary and secondary buttons map respectively to the E and F key on a keyboard.</p>

<blockquote>
  <p>Note: Entities that donâ€™t have a shape component, or that have their shapeâ€™s <code class="language-plaintext highlighter-rouge">visible</code> field set to <em>false</em> donâ€™t respond to pointer events.</p>
</blockquote>

<h2 id="pointer-event-components">Pointer event components</h2>

<h4 id="onpointerdown">OnPointerDown</h4>

<p>The best way to handle pointer and button down events is to add an <code class="language-plaintext highlighter-rouge">OnPointerDown</code> component to an entity.</p>

<p>The component requires that you pass it a function as a main argument. This function declares what to do in the event of a button down event while the player points at the entity.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">BoxShape</span><span class="p">())</span>

<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">OnPointerDown</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">myEntity was clicked</span><span class="dl">"</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
  <span class="p">})</span>
<span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>Tip: To keep your code easier to read, the function in the <code class="language-plaintext highlighter-rouge">OnPointerDown</code> can consist of just a call to a separate function that contains all of the logic.</p>
</blockquote>

<p>The <code class="language-plaintext highlighter-rouge">OnPointerDown</code> component has a second optional parameter, this parameter is an object that can include multiple properties about the event. These properties are explained in greater detail in the next few sub-sections.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">button</code>: Which key to listen for, from the <code class="language-plaintext highlighter-rouge">ActionButton</code> enum:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">ActionButton.POINTER</code> (left mouse click on PC)</li>
      <li><code class="language-plaintext highlighter-rouge">ActionButton.PRIMARY</code> (<em>E</em> on PC)</li>
      <li><code class="language-plaintext highlighter-rouge">ActionButton.SECONDARY</code>(<em>F</em> on PC)</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">hoverText</code>: Hint text to display on the UI when pointing at the entity.</li>
  <li><code class="language-plaintext highlighter-rouge">distance</code>: Maximum click distance.</li>
</ul>

<h4 id="onpointerup">OnPointerUp</h4>

<p>Add an <code class="language-plaintext highlighter-rouge">OnPointerUp</code> component to track when a player releases the mouse button, the primary or the secondary button while pointing at the entity.</p>

<p>Like the <code class="language-plaintext highlighter-rouge">OnPointerDown</code>, the <code class="language-plaintext highlighter-rouge">OnPointerUp</code> component requires a <em>callback function</em> that declares what to do in the event of a button up event while pointing at the entity.</p>

<p>This component also takes a second argument that supports the same additional fields as teh <code class="language-plaintext highlighter-rouge">OnPointerDown</code> component.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">BoxShape</span><span class="p">())</span>

<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">OnPointerUp</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">pointer up</span><span class="dl">"</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
  <span class="p">})</span>
<span class="p">)</span>
</code></pre></div></div>

<h4 id="specific-button-events">Specific button events</h4>

<p>The <code class="language-plaintext highlighter-rouge">OnPointerDown</code> and <code class="language-plaintext highlighter-rouge">OnPointerUp</code> components can respond to the following different buttons:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">POINTER</code> (left mouse click on PC)</li>
  <li><code class="language-plaintext highlighter-rouge">PRIMARY</code> (<em>E</em> on PC)</li>
  <li><code class="language-plaintext highlighter-rouge">SECONDARY</code>(<em>F</em> on PC)</li>
</ul>

<p>You can configure the components by setting the <code class="language-plaintext highlighter-rouge">button</code> field in the second argument of the component initializer.</p>

<p>If no button is specified, <code class="language-plaintext highlighter-rouge">ActionButton.ANY</code> is used as the default. This detects events from any of the available buttons on these components.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">BoxShape</span><span class="p">())</span>

<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">OnPointerDown</span><span class="p">(</span>
    <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">myEntity was clicked</span><span class="dl">"</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="p">{</span> <span class="na">button</span><span class="p">:</span> <span class="nx">ActionButton</span><span class="p">.</span><span class="nx">POINTER</span> <span class="p">}</span>
  <span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<h4 id="hint-messages">Hint messages</h4>

<p>When a player hovers the cursor over an item with an <code class="language-plaintext highlighter-rouge">OnPointerDown</code> or <code class="language-plaintext highlighter-rouge">OnPointerUp</code> component, the cursor changes shape to hint to the player that the entity is interactive.</p>

<p>You can also display a toast message in the UI that lets the player know what happens when interacting with the entity.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">OnPointerDown</span><span class="p">(</span>
    <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">myEntity clicked</span><span class="dl">"</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">button</span><span class="p">:</span> <span class="nx">ActionButton</span><span class="p">.</span><span class="nx">PRIMARY</span><span class="p">,</span>
      <span class="na">showFeedback</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">hoverText</span><span class="p">:</span> <span class="dl">"</span><span class="s2">open</span><span class="dl">"</span><span class="p">,</span>
    <span class="p">}</span>
  <span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<p>In the example above, the second argument of the <code class="language-plaintext highlighter-rouge">OnPointerDown</code> component has an object with the following arguments:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">button</code>: What button to respond to</li>
  <li><code class="language-plaintext highlighter-rouge">showFeedback</code>: Boolean to turn the feedback on or off. Itâ€™s <em>true</em> by default.</li>
  <li><code class="language-plaintext highlighter-rouge">hoverText</code>: String to display in the UI while the player points at the entity. By default, this string spells <em>Interact</em>, unless <code class="language-plaintext highlighter-rouge">showFeedback</code> is <em>false</em>.</li>
</ul>

<p>[IMAGE]</p>

<blockquote>
  <p>TIP: The <code class="language-plaintext highlighter-rouge">hoverText</code> string should describe the action that happens when interacting. For example <code class="language-plaintext highlighter-rouge">Open</code>, <code class="language-plaintext highlighter-rouge">Activate</code>, <code class="language-plaintext highlighter-rouge">Grab</code>, <code class="language-plaintext highlighter-rouge">Select</code>. These strings should be as short as possible, to avoid stealing too much focus from the player.</p>
</blockquote>

<p>The <code class="language-plaintext highlighter-rouge">hoverText</code> of an <code class="language-plaintext highlighter-rouge">OnPointerUp</code> component is only displayed while the player is already holding down the corresponding key and pointing at the entity.</p>

<p>If an entity has both an <code class="language-plaintext highlighter-rouge">OnPointerDown</code> and an <code class="language-plaintext highlighter-rouge">OnPointerUp</code> component, the hint for the <code class="language-plaintext highlighter-rouge">OnPointerDown</code> is shown while the button is not being pressed. The hint switches to the one from the <code class="language-plaintext highlighter-rouge">OnPointerUp</code> only when the button is pressed and remains pressed.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">OnPointerDown</span><span class="p">(</span>
    <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">myEntity clicked</span><span class="dl">"</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="p">{</span> <span class="na">button</span><span class="p">:</span> <span class="nx">ActionButton</span><span class="p">.</span><span class="nx">PRIMARY</span><span class="p">,</span> <span class="na">showFeedback</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">hoverText</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Drag</span><span class="dl">"</span> <span class="p">}</span>
  <span class="p">)</span>
<span class="p">)</span>

<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">OnPointerUp</span><span class="p">(</span>
    <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">myEntity released</span><span class="dl">"</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="p">{</span> <span class="na">button</span><span class="p">:</span> <span class="nx">ActionButton</span><span class="p">.</span><span class="nx">PRIMARY</span><span class="p">,</span> <span class="na">showFeedback</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">hoverText</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Drop</span><span class="dl">"</span> <span class="p">}</span>
  <span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<p>[IMAGE or GIF?]</p>

<h4 id="max-click-distance">Max click distance</h4>

<p>By default, entities are only clickable when the player is within a close range of the entity, at a maximum distance of <em>10 meters</em>. You can optionally configure the maximum distance through the <code class="language-plaintext highlighter-rouge">distance</code> parameter of the <code class="language-plaintext highlighter-rouge">OnPointerDown</code> and <code class="language-plaintext highlighter-rouge">OnPointerUp</code> components.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">OnPointerDown</span><span class="p">(</span>
    <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">myEntity clicked</span><span class="dl">"</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">button</span><span class="p">:</span> <span class="nx">ActionButton</span><span class="p">.</span><span class="nx">PRIMARY</span><span class="p">,</span>
      <span class="na">showFeedback</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">hoverText</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Activate</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">distance</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
    <span class="p">}</span>
  <span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<p>The example above sets the maximum distance to <em>8 meters</em>.</p>

<h4 id="event-arguments">Event arguments</h4>

<p>The <em>pointer down event</em> and the <em>pointer up event</em> objects are implicitly passed as parameters of the functions in the <code class="language-plaintext highlighter-rouge">OnPointerDown</code> and <code class="language-plaintext highlighter-rouge">OnPointerUp</code> components, respectively. This event object contains various properties that might be useful for the function. See <a href="#properties-of-button-events">Properties of button events</a> for more details.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">BoxShape</span><span class="p">())</span>

<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">OnPointerDown</span><span class="p">(</span>
    <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Click distance: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="p">{</span> <span class="na">button</span><span class="p">:</span> <span class="nx">ActionButton</span><span class="p">.</span><span class="nx">PRIMARY</span> <span class="p">}</span>
  <span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<h4 id="multiple-buttons-on-an-entity">Multiple buttons on an entity</h4>

<p>You may want to make an entity respond to different buttons in different ways. Each entity can only have <em>one</em> <code class="language-plaintext highlighter-rouge">OnPointerDown</code> component, and <em>one</em> <code class="language-plaintext highlighter-rouge">OnPointerUp</code> component, but you can use <code class="language-plaintext highlighter-rouge">ActionButton.ANY</code> and then tell them apart within the function.</p>

<p>Check the <code class="language-plaintext highlighter-rouge">buttonId</code> field from the event data. The value of this field returns a number, which maps to the values in the <code class="language-plaintext highlighter-rouge">ActionButton</code> array, for example by <code class="language-plaintext highlighter-rouge">POINTER</code> maps to <em>0</em>, <code class="language-plaintext highlighter-rouge">PRIMARY</code> to <em>1</em>, <code class="language-plaintext highlighter-rouge">SECONDARY</code> to <em>2</em>, etc.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">BoxShape</span><span class="p">())</span>

<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">OnPointerDown</span><span class="p">(</span>
    <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">buttonId</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Clicked pointer</span><span class="dl">"</span><span class="p">)</span>
      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">buttonId</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Pressed primary button</span><span class="dl">"</span><span class="p">)</span>
      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">buttonId</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Pressed secondary button</span><span class="dl">"</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="p">{</span> <span class="na">button</span><span class="p">:</span> <span class="nx">ActionButton</span><span class="p">.</span><span class="nx">ANY</span> <span class="p">}</span>
  <span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<p>Players will see a single label when hovering over the entity, so make sure itâ€™s clear that there are multiple ways to interact with it.</p>

<h2 id="properties-of-button-events">Properties of button events</h2>

<p>The events from <code class="language-plaintext highlighter-rouge">OnPointerDown</code> and <code class="language-plaintext highlighter-rouge">OnPointerUp</code> components, as well as all the global button event objects, contain the following parameters:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">origin</code>: Origin point of the ray, as a <em>Vector3</em></li>
  <li><code class="language-plaintext highlighter-rouge">direction</code>: Direction vector of the ray, as a normalized <em>Vector3</em> that points in the same direction.</li>
  <li><code class="language-plaintext highlighter-rouge">buttonId</code>: ID of the button that triggered the event (<em>POINTER</em>, <em>PRIMARY</em> or <em>SECONDARY</em>)</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">hit</code>: <em>(Optional)</em> Object describing the entity that was clicked on. If the click didnâ€™t hit any specific entity, this field isnâ€™t present. The <code class="language-plaintext highlighter-rouge">hit</code> object contains the following parameters:</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">length</code>: Length of the ray in meters, as a <em>number</em></li>
      <li><code class="language-plaintext highlighter-rouge">hitPoint</code>: The intersection point between the ray and the entityâ€™s mesh, as a <em>Vector3</em></li>
      <li><code class="language-plaintext highlighter-rouge">meshName</code>: The name of the mesh, if applicable, as a <em>string</em></li>
      <li><code class="language-plaintext highlighter-rouge">worldNormal</code>: The normal of the hit, in world space, as a <em>Vector3</em></li>
      <li><code class="language-plaintext highlighter-rouge">entityId</code>: The ID of the entity, if applicable, as a <em>string</em></li>
    </ul>
  </li>
</ul>

<h4 id="differentiate-meshes-inside-a-model">Differentiate meshes inside a model</h4>

<p>Often, <em>.glTF</em> 3D models are made up of multiple meshes, that each have an individual internal name. All button events events include the information of what specific mesh was clicked, so you can use this information to trigger different click behaviors in each case.</p>

<p>To see how the meshes inside the model are named, you must open the 3D model with an editing tool, like <a href="https://www.blender.org/">Blender</a> for example.</p>

<p><img src="/images/media/mesh-names.png" alt="Mesh internal names in an editor" width="250" /></p>

<blockquote>
  <p>Tip: You can also learn the name of the clicked mesh by logging it and reading it off console.</p>
</blockquote>

<p>You access the <code class="language-plaintext highlighter-rouge">meshName</code> property as part of the <code class="language-plaintext highlighter-rouge">hit</code> object, thatâ€™s returned by the click event.</p>

<p>In the example below we have a house model that includes a mesh named <code class="language-plaintext highlighter-rouge">firePlace</code>. We want to turn on the fireplace only when its corresponding mesh is clicked.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">houseEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">OnPointerDown</span><span class="p">(</span>
    <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">button A Down</span><span class="dl">"</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">hit</span><span class="p">.</span><span class="nx">meshName</span><span class="p">)</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">hit</span><span class="p">.</span><span class="nx">meshName</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">firePlace</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// light fire</span>
        <span class="nx">fireAnimation</span><span class="p">.</span><span class="nx">play</span><span class="p">()</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="p">{</span> <span class="na">button</span><span class="p">:</span> <span class="nx">ActionButton</span><span class="p">.</span><span class="nx">POINTER</span><span class="p">,</span> <span class="na">showFeeback</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}</span>
  <span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>Note: Since the <code class="language-plaintext highlighter-rouge">OnPointerDown</code> component belongs to the whole entity, the on-hover feedback would be seen when hovering over any part of the entity. In this case, any part of the house, not just the fireplace. For that reason, we set the <code class="language-plaintext highlighter-rouge">showFeedback</code> argument of the <code class="language-plaintext highlighter-rouge">OnPointerDown</code> component to <em>false</em>, so that no on-hover feedback is shown. For a better player experience, itâ€™s recommended to instead have the fireplace as a separate entity and maintain the on-hover feedback.</p>
</blockquote>

<h2 id="global-button-events">Global button events</h2>

<p>The <em>BUTTON_DOWN</em> and <em>BUTTON_UP</em> events are fired whenever the player presses or releases an input controller button.</p>

<p>These events are triggered every time that the buttons are pressed or released, regardless of where the playerâ€™s pointer is pointing at, as long as the player is standing inside the sceneâ€™s boundaries.</p>

<p>It also tracks keys used for basic avatar movement whilst in the scene.</p>

<p>Instance an <code class="language-plaintext highlighter-rouge">Input</code> object and use its <code class="language-plaintext highlighter-rouge">subscribe()</code> method to initiate a listener thatâ€™s subscribed to one of the button events. Whenever the event is caught, it executes a provided function.</p>

<p>The <code class="language-plaintext highlighter-rouge">subscribe()</code> method takes four arguments:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">eventName</code>: The type of action, this can be either <code class="language-plaintext highlighter-rouge">"BUTTON_DOWN"</code> or <code class="language-plaintext highlighter-rouge">"BUTTON_UP"</code></li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">buttonId</code>: Which button to listen for.
The following buttons can be tracked for both BUTTON_DOWN and BUTTON_UP events:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- `POINTER` (left mouse click on PC)
- `PRIMARY` (_E_ on PC)
- `SECONDARY`(_F_ on PC)
- `JUMP`(_space bar_ on PC)
- `FORWARD`(_W_ on PC)
- `LEFT`(_A_ on PC)
- `RIGHT`(_D_ on PC)
- `BACK`(_S_ on PC)
- `WALK`(_Shift_ on PC)
- `ACTION_3`(_1_ on PC)
- `ACTION_4`(_2_ on PC)
- `ACTION_5`(_3_ on PC)
- `ACTION_6`(_4_ on PC)
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">useRaycast</code>: Boolean to define if raycasting will be used. If <code class="language-plaintext highlighter-rouge">false</code>, the button event will not contain information about any <code class="language-plaintext highlighter-rouge">hit</code> objects that align with the pointer at the time of the event. Avoid setting this field to <code class="language-plaintext highlighter-rouge">true</code> when information about hit objects is not required, as it involves extra calculations.</li>
  <li><code class="language-plaintext highlighter-rouge">fn</code>: The function to execute each time the event occurs.</li>
</ul>

<blockquote>
  <p>Note: Other keys on the PC keyboard arenâ€™t tracked for future cross-platform compatibility, as this limited set of keys can be mapped to a joystick. For detecting key-strokes when writing text, check the <a href="/development-guide/onscreen-ui/">UIInputBox</a>.</p>
</blockquote>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Instance the input object</span>
<span class="kd">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">Input</span><span class="p">.</span><span class="nx">instance</span>

<span class="c1">// button down event</span>
<span class="nx">input</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="dl">"</span><span class="s2">BUTTON_DOWN</span><span class="dl">"</span><span class="p">,</span> <span class="nx">ActionButton</span><span class="p">.</span><span class="nx">POINTER</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">pointer Down</span><span class="dl">"</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
<span class="p">})</span>

<span class="c1">// button up event</span>
<span class="nx">input</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="dl">"</span><span class="s2">BUTTON_UP</span><span class="dl">"</span><span class="p">,</span> <span class="nx">ActionButton</span><span class="p">.</span><span class="nx">POINTER</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">pointer Up</span><span class="dl">"</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
<span class="p">})</span>
</code></pre></div></div>

<p>The example above logs messages and the contents of the event object every time the pointer button is pushed down or released.</p>

<p>The event objects of both the <code class="language-plaintext highlighter-rouge">BUTTON_DOWN</code> and the <code class="language-plaintext highlighter-rouge">BUTTON_UP</code> contain various useful properties. See <a href="#properties-of-button-events">Properties of button events</a> for more details.</p>

<blockquote>
  <p>Note: The code for subscribing an input event only needs to be executed once, the <code class="language-plaintext highlighter-rouge">subscribe()</code> method keeps polling for the event. Donâ€™t add this into a systemâ€™s <code class="language-plaintext highlighter-rouge">update()</code> function, as that would register a new listener on every frame.</p>
</blockquote>

<h4 id="detect-hit-entities">Detect hit entities</h4>

<p>If the third argument of the <code class="language-plaintext highlighter-rouge">subscribe()</code> function (<code class="language-plaintext highlighter-rouge">useRaycast</code>)is true, and the player is pointing at an entity that has a collider, the event object includes a nested <code class="language-plaintext highlighter-rouge">hit</code> object. The <code class="language-plaintext highlighter-rouge">hit</code> object includes information about the collision and the entity that was hit.</p>

<p>Raycasting is not available when detecting basic movement keys. Itâ€™s only available when tracking the following buttons:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">POINTER</code></li>
  <li><code class="language-plaintext highlighter-rouge">PRIMARY</code></li>
  <li><code class="language-plaintext highlighter-rouge">SECONDARY</code></li>
  <li><code class="language-plaintext highlighter-rouge">ACTION_3</code></li>
  <li><code class="language-plaintext highlighter-rouge">ACTION_4</code></li>
  <li><code class="language-plaintext highlighter-rouge">ACTION_5</code></li>
  <li><code class="language-plaintext highlighter-rouge">ACTION_6</code></li>
</ul>

<p>The ray of a global button event only detects entities that have a collider mesh. Primitive shapes have a collider mesh on by default, 3D models need to have one built into them.</p>

<blockquote>
  <p>Tip: See <a href="/3d-modeling/colliders/">Colliders</a> for details on how to add collider meshes to a 3D model.</p>
</blockquote>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">input</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="dl">"</span><span class="s2">BUTTON_DOWN</span><span class="dl">"</span><span class="p">,</span> <span class="nx">ActionButton</span><span class="p">.</span><span class="nx">POINTER</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">hit</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">hitEntity</span> <span class="o">=</span> <span class="nx">engine</span><span class="p">.</span><span class="nx">entities</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">hit</span><span class="p">.</span><span class="nx">entityId</span><span class="p">]</span>
    <span class="nx">hitEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">greenMaterial</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>

<p>The example above checks if any entities were hit, and if so it fetches the entity and applies a material component to it.</p>

<p>The event data returns a string for the <code class="language-plaintext highlighter-rouge">entityId</code>. If you want to reference the actual entity by that ID to affect it in some way, use <code class="language-plaintext highlighter-rouge">engine.entities[e.hit.entityId]</code>.</p>

<blockquote>
  <p>Note: We recommend that when possible you use the approach of adding an <code class="language-plaintext highlighter-rouge">OnPointerDown</code> component to each entity you want to make interactive, instead of using a global button event. The sceneâ€™s code isnâ€™t able to hint to a player that an entity is interactive when hovering on it unless the entity has an <code class="language-plaintext highlighter-rouge">OnPointerDown</code>, <code class="language-plaintext highlighter-rouge">OnPointerUp</code>, or <code class="language-plaintext highlighter-rouge">OnClick</code> component.</p>
</blockquote>

<h4 id="tracking-player-movements">Tracking player movements</h4>

<p>In real-time multiplayer games where the timing of player movements is critical, you may want to keep track of each playerâ€™s position using a 3rd party server as the source of truth. You can improve response time by listening to the button in advance and predict their effects in your server before the avatar has shifted position.</p>

<p>This approach helps compensate for network delays, but is sure to result in discrepancies, so you should also regularly poll the playerâ€™s current position to make corrections. Balancing these predictions and corrections may require plenty of fine-tuning.</p>

<h2 id="ray-obstacles">Ray Obstacles</h2>

<p>Button events cast rays that only interact with the first entity on their path, as long as the entity is closer than its distance limit.</p>

<p>For an entity to be intercepted by the ray of a button event, the entityâ€™s shape must either have a collider mesh, or the entity must have a component related to button events (<code class="language-plaintext highlighter-rouge">OnPointerDown</code>, <code class="language-plaintext highlighter-rouge">OnPointerUp</code> or <code class="language-plaintext highlighter-rouge">OnClick</code>).</p>

<p>If another entityâ€™s collider is standing on the way of the entity that the player wants to click, the player wonâ€™t be able to click the entity thatâ€™s behind, unless the entity thatâ€™s in-front has a shape with its <code class="language-plaintext highlighter-rouge">isPointerBlocker</code> property set to false.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">myEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="kd">let</span> <span class="nx">box</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BoxShape</span><span class="p">()</span>
<span class="nx">box</span><span class="p">.</span><span class="nx">isPointerBlocker</span> <span class="o">=</span> <span class="kc">false</span>
<span class="nx">box</span><span class="p">.</span><span class="nx">visible</span> <span class="o">=</span> <span class="kc">false</span>
<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">box</span><span class="p">)</span>
<span class="nx">engine</span><span class="p">.</span><span class="nx">addEntity</span><span class="p">(</span><span class="nx">myEntity</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="onhover-component">OnHover Component</h2>

<p>Add <code class="language-plaintext highlighter-rouge">OnPointerHoverEnter</code> and <code class="language-plaintext highlighter-rouge">OnPointerHoverExit</code> components to an entity to run a callback function every time that the playerâ€™s cursor starts or stops pointing at the entity.</p>

<p>You can use this to hint that something is interactable in some custom way, like showing a glowing highlight around the entity, playing a subtle sound, etc. It could also be used for specific gameplay mechanics.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">OnPointerHoverEnter</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Started Pointing at entity</span><span class="dl">"</span><span class="p">)</span>
  <span class="p">})</span>
<span class="p">)</span>

<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">OnPointerHoverExit</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Stopped Pointing at entity</span><span class="dl">"</span><span class="p">)</span>
  <span class="p">})</span>
<span class="p">)</span>
</code></pre></div></div>

<p>On the <code class="language-plaintext highlighter-rouge">OnPointerHoverEnter</code> component, you can set a maximum distance, to only trigger the callback when the player is near the entity.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">OnPointerHoverEnter</span><span class="p">(</span>
    <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Started Pointing at entity</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">distance</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
    <span class="p">}</span>
  <span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>TIP: Note that all entities with an <code class="language-plaintext highlighter-rouge">OnPointerDown</code> component by default show a UI hint when hovered over. You can disable this UI hint by setting the <code class="language-plaintext highlighter-rouge">showFeeback</code> property on the <code class="language-plaintext highlighter-rouge">OnPointerDown</code> component to false.</p>
</blockquote>

<h2 id="onclick-component---deprecated">OnClick Component - DEPRECATED</h2>

<p>As an alternative to <code class="language-plaintext highlighter-rouge">OnPointerDown</code>, you can use the <code class="language-plaintext highlighter-rouge">OnClick</code> component. This component only tracks button events from the <code class="language-plaintext highlighter-rouge">POINTER</code>, not from the primary or secondary buttons.</p>

<p>You declare what to do in the event of a click by writing a function in the <code class="language-plaintext highlighter-rouge">OnClick</code> component.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myEntity</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">BoxShape</span><span class="p">())</span>

<span class="nx">myEntity</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span>
  <span class="k">new</span> <span class="nx">OnClick</span><span class="p">((</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">myEntity clicked</span><span class="dl">"</span><span class="p">)</span>
  <span class="p">})</span>
<span class="p">)</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">OnClick</code> component passes less event information than the <code class="language-plaintext highlighter-rouge">OnPointerDown</code> component, it lacks the click distance or the mesh name, for example.</p>

<!--

It only contains the following parameter, which can be accessed by your function:

- `buttonId`: ID of the button that triggered the event (_PRIMARY_ or _SECONDARY_)

```ts
const myEntity = new Entity()
myEntity.addComponent(new BoxShape())

myEntity.addComponent(
  new OnClick(e => {
    log("pointer Id" + e.buttonId)
  })
)
```

-->

<blockquote>
  <p>Note: Entities that donâ€™t have a shape component, or that have their shapeâ€™s <code class="language-plaintext highlighter-rouge">visible</code> field set to <em>false</em> canâ€™t be clicked.</p>
</blockquote>

<h2 id="button-state">Button state</h2>

<p>You can check for the buttonâ€™s current state (up or down) using the <em>Input</em> object.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">buttonState</span> <span class="o">=</span> <span class="nx">input</span><span class="p">.</span><span class="nx">isButtonPressed</span><span class="p">(</span><span class="nx">ActionButton</span><span class="p">.</span><span class="nx">POINTER</span><span class="p">)</span>
</code></pre></div></div>

<p>If the pointer button is currently being held down, the statement above returns the value <em>true</em>, otherwise it returns <em>false</em>.</p>

<p>You can check for the states of the <code class="language-plaintext highlighter-rouge">PRIMARY</code> and <code class="language-plaintext highlighter-rouge">SECONDARY</code> buttons in the same way, providing <code class="language-plaintext highlighter-rouge">ActionButton.PRIMARY</code> or <code class="language-plaintext highlighter-rouge">ActionButton.SECONDARY</code> as arguments for the <code class="language-plaintext highlighter-rouge">isButtonPressed()</code> function.</p>

<p>You can implement this in a systemâ€™s <code class="language-plaintext highlighter-rouge">update()</code> function to check the button state regularly.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Instance the input object</span>
<span class="kd">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">Input</span><span class="p">.</span><span class="nx">instance</span>

<span class="kd">class</span> <span class="nx">ButtonChecker</span> <span class="k">implements</span> <span class="nx">ISystem</span> <span class="p">{</span>
  <span class="nx">update</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nx">isButtonPressed</span><span class="p">(</span><span class="nx">ActionButton</span><span class="p">.</span><span class="nx">POINTER</span><span class="p">))</span> <span class="p">{</span>
      <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">pointer button down</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">pointer button up</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">engine</span><span class="p">.</span><span class="nx">addSystem</span><span class="p">(</span><span class="k">new</span> <span class="nx">ButtonChecker</span><span class="p">())</span>
</code></pre></div></div>
:ET