I"Ä<p>3D models in <em>.glTF</em> and <em>.glb</em> format can include as many animations as you want in them. Animations tell the mesh how to move, by specifying a series of <em>keyframes</em> that are laid out over time, the mesh then blends from one pose to the other to simulate continuous movement.</p>

<p>Most 3D model animations are <a href="https://en.wikipedia.org/wiki/Skeletal_animation"><em>skeletal animations</em></a>. These animations simplify the complex geometry of the model into a ‚Äústick figure‚Äù, linking every vertex in the mesh to the closest <em>bone</em> in the <em>skeleton</em>. Modelers adjust the skeleton into different poses, and the mesh stretches and bends to follow these movements.</p>

<p>As an alternative, <em>vertex animations</em> animate a model without the need of a skeleton. These animations specify the position of each vertex in the model directly. Decentraland supports these animations as well.</p>

<p>See <a href="/3d-modeling/animations/">Animations</a> for details on how to create animations for a 3D model. Read <a href="/development-guide/shape-components/">Shape components</a> for instructions on how to import a 3D model to a scene.</p>

<blockquote>
  <p>Tip: Animations are usually better for moving something in place, not for changing the position of an entity. For example, you can set an animation to move a character‚Äôs feet in place, but to change the location of the entity it‚Äôs best to use the Transform component. See <a href="/development-guide/move-entities/">Positioning entities</a> for more details.</p>
</blockquote>

<h2 id="check-a-3d-model-for-animations">Check a 3D model for animations</h2>

<p>Not all <em>glTF</em> files include animations. To see if there are any available, you can do the following:</p>

<ul>
  <li>If using <a href="https://code.visualstudio.com/">VS Code</a>(recommended), install the <em>GLTF Tools</em> extension and view the contents of a glTF file there.</li>
  <li>Open the <a href="https://sandbox.babylonjs.com/">Babylon Sandbox</a> site and drag the glTF file (and any <em>.jpg</em> or <em>.bin</em> dependencies) to the browser.</li>
  <li>Open the <em>.glTF</em> file with a text editor and scroll down till you find <em>‚Äúanimations‚Äù:</em>.</li>
</ul>

<blockquote>
  <p>Tip: In <em>skeletal</em> animations, an animation name is often comprised of its armature name, an underscore and its animation name. For example <code class="language-plaintext highlighter-rouge">myArmature_animation1</code>.</p>
</blockquote>

<h2 id="automatic-playing">Automatic playing</h2>

<p>If a 3d model includes any animations, the default behavior is that the first of these is always played on a loop.</p>

<p>To avoid this behavior, add an <code class="language-plaintext highlighter-rouge">Animator</code> component to the entity that has the model, and then handle the playing of animations explicitly. If an <code class="language-plaintext highlighter-rouge">Animator</code> component is present in the entity, all animations default to a <code class="language-plaintext highlighter-rouge">stopped</code> state, and need to be manually played.</p>

<h2 id="handle-animations-explicitly">Handle animations explicitly</h2>

<p>An <code class="language-plaintext highlighter-rouge">Animator</code> component is used to access all the animations of the entity and can be used to explicitly tell the entity to play or stop an animation. Each animation is handled by an <code class="language-plaintext highlighter-rouge">AnimationState</code> object.</p>

<p><img src="/images/media/ecs-animations.png" alt="" /></p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create entity</span>
<span class="kd">let</span> <span class="nx">shark</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>

<span class="c1">// Add a 3D model to it</span>
<span class="nx">shark</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">GLTFShape</span><span class="p">(</span><span class="dl">"</span><span class="s2">models/shark.gltf</span><span class="dl">"</span><span class="p">))</span>

<span class="c1">// Create animator component</span>
<span class="kd">let</span> <span class="nx">animator</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Animator</span><span class="p">()</span>

<span class="c1">// Add animator component to the entity</span>
<span class="nx">shark</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">animator</span><span class="p">)</span>

<span class="c1">// Instance animation clip object</span>
<span class="kd">const</span> <span class="nx">clipSwim</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AnimationState</span><span class="p">(</span><span class="dl">"</span><span class="s2">swim</span><span class="dl">"</span><span class="p">)</span>

<span class="c1">// Add animation clip to Animator component</span>
<span class="nx">animator</span><span class="p">.</span><span class="nx">addClip</span><span class="p">(</span><span class="nx">clipSwim</span><span class="p">)</span>

<span class="c1">// Add entity to engine</span>
<span class="nx">engine</span><span class="p">.</span><span class="nx">addEntity</span><span class="p">(</span><span class="nx">shark</span><span class="p">)</span>
</code></pre></div></div>

<p>You can also achieve the same with less statements:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create and add animator component</span>
<span class="nx">shark</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">Animator</span><span class="p">())</span>

<span class="c1">// Instance and add a clip</span>
<span class="nx">shark</span><span class="p">.</span><span class="nx">getComponent</span><span class="p">(</span><span class="nx">Animator</span><span class="p">).</span><span class="nx">addClip</span><span class="p">(</span><span class="k">new</span> <span class="nx">AnimationState</span><span class="p">(</span><span class="dl">"</span><span class="s2">swim</span><span class="dl">"</span><span class="p">))</span>
</code></pre></div></div>

<p>You can retrieve an <code class="language-plaintext highlighter-rouge">AnimationState</code> object from an <code class="language-plaintext highlighter-rouge">Animator</code> component with the <code class="language-plaintext highlighter-rouge">getClip()</code> function.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create and get a clip</span>
<span class="kd">let</span> <span class="nx">clipSwim</span> <span class="o">=</span> <span class="nx">animator</span><span class="p">.</span><span class="nx">getClip</span><span class="p">(</span><span class="dl">"</span><span class="s2">swim</span><span class="dl">"</span><span class="p">)</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">AnimationState</code> object doesn‚Äôt store the actual transformations that go into the animation, that‚Äôs all in the .glTF file. Instead, the <code class="language-plaintext highlighter-rouge">AnimationState</code> object has a state that keeps track how far it has advanced along the animation.</p>

<h2 id="fetch-an-animation">Fetch an animation</h2>

<p>If you don‚Äôt have a pointer to refer to the clip object directly, you can fetch a clip from the <code class="language-plaintext highlighter-rouge">Animator</code> by name using <code class="language-plaintext highlighter-rouge">getClip()</code>.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create and add a clip</span>
<span class="nx">shark</span><span class="p">.</span><span class="nx">getComponent</span><span class="p">(</span><span class="nx">Animator</span><span class="p">).</span><span class="nx">addClip</span><span class="p">(</span><span class="k">new</span> <span class="nx">AnimationState</span><span class="p">(</span><span class="dl">"</span><span class="s2">swim</span><span class="dl">"</span><span class="p">))</span>

<span class="c1">// Fetch the clip</span>
<span class="nx">shark</span><span class="p">.</span><span class="nx">getComponent</span><span class="p">(</span><span class="nx">Animator</span><span class="p">).</span><span class="nx">getClip</span><span class="p">(</span><span class="dl">"</span><span class="s2">swim</span><span class="dl">"</span><span class="p">)</span>
</code></pre></div></div>

<!--
... which one is true?

> Note: If you attempt to use `getClip()` to fetch a clip that doesn't exist in the Animator component, it returns `null`.

If you try to get an `AnimationState` that was never added to the `Animator` component, the clip is created and added automatically.
-->

<h2 id="play-an-animation">Play an animation</h2>

<p>When an <code class="language-plaintext highlighter-rouge">AnimationState</code> is created, it starts as paused by default.</p>

<p>The simplest way to play or pause it is to use the <code class="language-plaintext highlighter-rouge">play()</code> and <code class="language-plaintext highlighter-rouge">pause()</code> methods of the <code class="language-plaintext highlighter-rouge">AnimationState</code>.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create animation clip</span>
<span class="kd">const</span> <span class="nx">clipSwim</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AnimationState</span><span class="p">(</span><span class="dl">"</span><span class="s2">swim</span><span class="dl">"</span><span class="p">)</span>

<span class="c1">// Start playing the clip</span>
<span class="nx">clipSwim</span><span class="p">.</span><span class="nx">play</span><span class="p">()</span>

<span class="c1">// Pause the playing of the clip</span>
<span class="nx">clipSwim</span><span class="p">.</span><span class="nx">pause</span><span class="p">()</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">play()</code> function on an <code class="language-plaintext highlighter-rouge">AnimationState</code> object has one optional parameter:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">reset</code>: If true, it always plays the animation from the start. Default: <em>false</em>.</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">clipSwim</span><span class="p">.</span><span class="nx">play</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</code></pre></div></div>

<p>The following table summarizes how <code class="language-plaintext highlighter-rouge">play()</code> behaves, using different values for the <code class="language-plaintext highlighter-rouge">reset</code> property:</p>

<table>
  <thead>
    <tr>
      <th>¬†</th>
      <th><code class="language-plaintext highlighter-rouge">reset</code> = <em>false</em> (default)</th>
      <th><code class="language-plaintext highlighter-rouge">reset</code> = <em>true</em></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Currently playing</strong></td>
      <td>Has no effect.</td>
      <td>Plays from the start.</td>
    </tr>
    <tr>
      <td><strong>Paused</strong></td>
      <td>Resumes from last frame played.</td>
      <td>Plays from the start.</td>
    </tr>
    <tr>
      <td><strong>Finished (Non-looping)</strong></td>
      <td>Plays from the start.</td>
      <td>Plays from the start.</td>
    </tr>
  </tbody>
</table>

<p>You can also play an animation from the <code class="language-plaintext highlighter-rouge">Animator</code> component of an entity.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">shark</span><span class="p">.</span><span class="nx">getComponent</span><span class="p">(</span><span class="nx">Animator</span><span class="p">).</span><span class="nx">play</span><span class="p">(</span><span class="nx">clipSwim</span><span class="p">)</span>
</code></pre></div></div>

<p>When calling the <code class="language-plaintext highlighter-rouge">play()</code> function on the Animator component, there are two parameters to set:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">clip</code>: An AnimationState object to play</li>
  <li><code class="language-plaintext highlighter-rouge">reset</code>:<em>(optional)</em> If true, it always plays the animation plays from the start. Default: <em>false</em>.</li>
</ul>

<h2 id="looping-animations">Looping animations</h2>

<p>By default, animations are played in a loop that keeps repeating the animation forever.</p>

<p>Change this setting by setting the <code class="language-plaintext highlighter-rouge">looping</code> property in the <code class="language-plaintext highlighter-rouge">AnimationState</code> object.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create animation clip</span>
<span class="kd">const</span> <span class="nx">biteClip</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AnimationState</span><span class="p">(</span><span class="dl">"</span><span class="s2">bite</span><span class="dl">"</span><span class="p">)</span>

<span class="c1">// Set loop to false</span>
<span class="nx">biteClip</span><span class="p">.</span><span class="nx">looping</span> <span class="o">=</span> <span class="kc">false</span>

<span class="c1">// Start playing the clip</span>
<span class="nx">biteClip</span><span class="p">.</span><span class="nx">play</span><span class="p">()</span>
</code></pre></div></div>

<p>If <code class="language-plaintext highlighter-rouge">looping</code> is set to <em>false</em>, the animation plays just once and then stops.</p>

<h2 id="reset-an-animation">Reset an animation</h2>

<p>When an animation finishes playing or is paused, the 3D model remains in the last posture it had.</p>

<p>To stop an animation and set the posture back to the first frame in the animation, use the <code class="language-plaintext highlighter-rouge">stop()</code> function of the <code class="language-plaintext highlighter-rouge">AnimationState</code> object.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">clipSwim</span><span class="p">.</span><span class="nx">stop</span><span class="p">()</span>
</code></pre></div></div>

<p>To play an animation from the start, regardless of what frame the animation is currently in, set the <code class="language-plaintext highlighter-rouge">reset</code> property on the <code class="language-plaintext highlighter-rouge">play()</code> function to <em>true</em>.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">clipSwim</span><span class="p">.</span><span class="nx">play</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>Note: Resetting the posture is an abrupt change. If you want to make the model transition smoothly tinto another posture, you can either:</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- apply an animation with a `weight` property of 0 and gradually increase the `weight`
- create an animation clip that describes a movement from the posture you want to transition from to the default posture you want.
</code></pre></div></div>

<h2 id="handle-multiple-animations">Handle multiple animations</h2>

<p>If a 3D model has multiple animations packed into it, a single <code class="language-plaintext highlighter-rouge">Animator</code> component can deal with all of them.</p>

<p>Animations exist in <em>layers</em> in an <code class="language-plaintext highlighter-rouge">Animator</code> component. If two animations are in the same layer, only one of them can play at a time. Starting one will stop the other. If two animations exist on separate layers, they can play at the same time, given that their <em>weight</em> values add up, or if they each control different bones or vertexes from the model.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">shark</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="nx">shark</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="k">new</span> <span class="nx">GLTFShape</span><span class="p">(</span><span class="dl">"</span><span class="s2">models/shark.gltf</span><span class="dl">"</span><span class="p">))</span>

<span class="c1">// Create animator component</span>
<span class="kd">let</span> <span class="nx">animator</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Animator</span><span class="p">()</span>

<span class="c1">// Add animator component to the entity</span>
<span class="nx">shark</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">animator</span><span class="p">)</span>

<span class="c1">// Crete animation state objects</span>
<span class="kd">const</span> <span class="nx">clipSwim</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AnimationState</span><span class="p">(</span><span class="dl">"</span><span class="s2">swim</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">layer</span><span class="p">:</span> <span class="mi">0</span> <span class="p">})</span>
<span class="kd">const</span> <span class="nx">biteClip</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AnimationState</span><span class="p">(</span><span class="dl">"</span><span class="s2">bite</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">layer</span><span class="p">:</span> <span class="mi">1</span> <span class="p">})</span>

<span class="c1">// Add animation state objects to the Animator component</span>
<span class="nx">shark</span><span class="p">.</span><span class="nx">getComponent</span><span class="p">(</span><span class="nx">Animator</span><span class="p">).</span><span class="nx">addClip</span><span class="p">(</span><span class="nx">clipSwim</span><span class="p">)</span>
<span class="nx">shark</span><span class="p">.</span><span class="nx">getComponent</span><span class="p">(</span><span class="nx">Animator</span><span class="p">).</span><span class="nx">addClip</span><span class="p">(</span><span class="nx">biteClip</span><span class="p">)</span>

<span class="nx">clipSwim</span><span class="p">.</span><span class="nx">play</span><span class="p">()</span>
<span class="nx">biteClip</span><span class="p">.</span><span class="nx">play</span><span class="p">()</span>

<span class="nx">engine</span><span class="p">.</span><span class="nx">addEntity</span><span class="p">(</span><span class="nx">shark</span><span class="p">)</span>
</code></pre></div></div>

<p>In the example above, two animations are handled by separate <code class="language-plaintext highlighter-rouge">AnimationState</code> objects, and they are then both assigned to the same <code class="language-plaintext highlighter-rouge">Animator</code> component.</p>

<blockquote>
  <p>Note: If the layer of an animation isn‚Äôt specified, it‚Äôs assigned to layer 0.</p>
</blockquote>

<p>Each bone in an animation can only be affected by one animation at a time, unless these animations have a <code class="language-plaintext highlighter-rouge">weight</code> that adds up to a value of 1 or less.</p>

<p>If one animation only affects a character‚Äôs legs, and another only affects a character‚Äôs head, then they can be played at the same time without any issue. But if they both affect the character‚Äôs legs, then you must either only play one at a time, or play them with lower <code class="language-plaintext highlighter-rouge">weight</code> values.</p>

<p>If in the above example, the <code class="language-plaintext highlighter-rouge">bite</code> animation only affects the shark‚Äôs mouth, and the <code class="language-plaintext highlighter-rouge">swim</code> animation only affects the bones of the shark‚Äôs spine, then they can both be played at the same time if they‚Äôre on separate layers.</p>

<h2 id="animation-speed">Animation speed</h2>

<p>Change the speed at which an animation is played by changing the <code class="language-plaintext highlighter-rouge">speed</code> property. The value of the speed is 1 by default.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create animation clip</span>
<span class="kd">const</span> <span class="nx">clipSwim</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AnimationState</span><span class="p">(</span><span class="dl">"</span><span class="s2">swim</span><span class="dl">"</span><span class="p">)</span>

<span class="c1">// Set speed to twice as fast</span>
<span class="nx">clipSwim</span><span class="p">.</span><span class="nx">speed</span> <span class="o">=</span> <span class="mi">2</span>

<span class="c1">// Start playing the clip</span>
<span class="nx">clipSwim</span><span class="p">.</span><span class="nx">play</span><span class="p">()</span>
</code></pre></div></div>

<p>Set the speed lower than 1 to play it slower, for example to 0.5 to play it at half the speed. Set it higher than 1 to play it faster, for example to 2 to play it at double the speed.</p>

<h2 id="animation-weight">Animation weight</h2>

<p>The <code class="language-plaintext highlighter-rouge">weight</code> property allows a single model to carry out multiple animations on different layers at once, calculating a weighted average of all the movements involved in the animation. The value of <code class="language-plaintext highlighter-rouge">weight</code> determines how much importance that animation will be given in the average.</p>

<p>By default, <code class="language-plaintext highlighter-rouge">weight</code> is equal to <em>1</em>, it can‚Äôt be any higher than <em>1</em>.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Create animation clip</span>
<span class="kd">const</span> <span class="nx">clipSwim</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AnimationState</span><span class="p">(</span><span class="dl">"</span><span class="s2">swim</span><span class="dl">"</span><span class="p">)</span>

<span class="c1">// Set weight</span>
<span class="nx">clipSwim</span><span class="p">.</span><span class="nx">weight</span> <span class="o">=</span> <span class="mf">0.5</span>

<span class="c1">// Start playing the clip</span>
<span class="nx">clipSwim</span><span class="p">.</span><span class="nx">play</span><span class="p">()</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">weight</code> value of all active animations in an entity should add up to 1 at all times. If it adds up to less than 1, the weighted average will be using the default position of the armature for the remaining part of the calculation.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">clipSwim</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AnimationState</span><span class="p">(</span><span class="dl">"</span><span class="s2">swim</span><span class="dl">"</span><span class="p">)</span>
<span class="nx">clipSwim</span><span class="p">.</span><span class="nx">weight</span> <span class="o">=</span> <span class="mf">0.2</span>

<span class="nx">animator</span><span class="p">.</span><span class="nx">addClip</span><span class="p">(</span><span class="nx">clipSwim</span><span class="p">)</span>

<span class="nx">clipSwim</span><span class="p">.</span><span class="nx">play</span><span class="p">()</span>
</code></pre></div></div>

<p>For example, in the code example above, we‚Äôre playing the <em>swim</em> animation, that only has a <code class="language-plaintext highlighter-rouge">weight</code> of <em>0.2</em>. This swimming movement will be quite subtle: only 20% of the intensity that the animation defines. The remaining 80% of the calculation takes values from the default posture of the armature.</p>

<p>The <code class="language-plaintext highlighter-rouge">weight</code> property can be used in interesting ways, for example the <code class="language-plaintext highlighter-rouge">weight</code> property of <em>swim</em> could be set in proportion to how fast the shark is swimming, so you don‚Äôt need to create multiple animations for fast and slow swimming.</p>

<p>You could also change the <code class="language-plaintext highlighter-rouge">weight</code> value gradually when starting and stopping an animation to give it a more natural transition and to avoid jumps from the default pose to the first pose in the animation.</p>

<blockquote>
  <p>Note: The added <code class="language-plaintext highlighter-rouge">weight</code> value of all animations that are acting on a 3D model‚Äôs bone can‚Äôt be more than 1. If more than one animation is affecting the same bones at the same time, they need to have their weight set to values that add to less than 1.</p>
</blockquote>

<h2 id="set-clip-parameters-in-bulk">Set clip parameters in bulk</h2>

<p>Use the <code class="language-plaintext highlighter-rouge">setParams()</code> function of the <code class="language-plaintext highlighter-rouge">AnimationState</code> object to set multiple parameters at once.</p>

<p>You can configure the following parameters:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">playing</code>: Boolean to determine if the animation is currently being played.</li>
  <li><code class="language-plaintext highlighter-rouge">looping</code>: Boolean to determine if the animation is played in a continuous loop.</li>
  <li><code class="language-plaintext highlighter-rouge">speed</code>: A number that determines how fast the animation is played.</li>
  <li><code class="language-plaintext highlighter-rouge">layer</code>: The layer of the animation. To play multiple animations at once, they must be on separate layers in the <code class="language-plaintext highlighter-rouge">Animator</code> component. By default, animations are added to layer 0.</li>
  <li><code class="language-plaintext highlighter-rouge">weight</code>: Used to blend animations using weighted average.</li>
</ul>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">clipSwim</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AnimationState</span><span class="p">(</span><span class="dl">"</span><span class="s2">swim</span><span class="dl">"</span><span class="p">)</span>

<span class="nx">clipSwim</span><span class="p">.</span><span class="nx">setParams</span><span class="p">({</span>
  <span class="na">playing</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">looping</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">speed</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
  <span class="na">layer</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="na">weight</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span>
<span class="p">})</span>
</code></pre></div></div>

<h2 id="animations-on-shared-shapes">Animations on shared shapes</h2>

<p>You can use a same instance of a <code class="language-plaintext highlighter-rouge">GLTFShape</code> component on multiple entities to save resources. If each entity has both its own <code class="language-plaintext highlighter-rouge">Animator</code> component and its own <code class="language-plaintext highlighter-rouge">AnimationState</code> objects, then they can each be animated independently.</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//create entities</span>
<span class="kd">let</span> <span class="nx">shark1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>
<span class="kd">let</span> <span class="nx">shark2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Entity</span><span class="p">()</span>

<span class="c1">// create reusable shape component</span>
<span class="kd">let</span> <span class="nx">sharkShape</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GLTFShape</span><span class="p">(</span><span class="dl">"</span><span class="s2">models/shark.gltf</span><span class="dl">"</span><span class="p">)</span>

<span class="c1">// Add the same GLTFShape instance to both entities</span>
<span class="nx">shark1</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">sharkShape</span><span class="p">)</span>
<span class="nx">shark2</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">sharkShape</span><span class="p">)</span>

<span class="c1">// Create separate animator components</span>
<span class="kd">let</span> <span class="nx">animator1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Animator</span><span class="p">()</span>
<span class="kd">let</span> <span class="nx">animator2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Animator</span><span class="p">()</span>

<span class="c1">// Add separate animator components to the entities</span>
<span class="nx">shark1</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">animator1</span><span class="p">)</span>
<span class="nx">shark2</span><span class="p">.</span><span class="nx">addComponent</span><span class="p">(</span><span class="nx">animator2</span><span class="p">)</span>

<span class="c1">// Instance separate animation clip objects</span>
<span class="kd">const</span> <span class="nx">clipSwim1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AnimationState</span><span class="p">(</span><span class="dl">"</span><span class="s2">swim</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">clipSwim2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AnimationState</span><span class="p">(</span><span class="dl">"</span><span class="s2">swim</span><span class="dl">"</span><span class="p">)</span>

<span class="c1">// Add animation clips to Animator components</span>
<span class="nx">animator1</span><span class="p">.</span><span class="nx">addClip</span><span class="p">(</span><span class="nx">clipSwim1</span><span class="p">)</span>
<span class="nx">animator2</span><span class="p">.</span><span class="nx">addClip</span><span class="p">(</span><span class="nx">clipSwim2</span><span class="p">)</span>

<span class="nx">engine</span><span class="p">.</span><span class="nx">addEntity</span><span class="p">(</span><span class="nx">shark1</span><span class="p">)</span>
<span class="nx">engine</span><span class="p">.</span><span class="nx">addEntity</span><span class="p">(</span><span class="nx">shark2</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>Note: If you define a single <code class="language-plaintext highlighter-rouge">AnimationState</code> object instance and add it to multiple <code class="language-plaintext highlighter-rouge">Animator</code> components from different entities, all entities using the <code class="language-plaintext highlighter-rouge">AnimationState</code> instance will be animated together at the same time.</p>
</blockquote>
:ET